const { IntegrationBase } = require('@friggframework/core');
const asic = require('../api-modules/asic');
const nagaris = require('../api-modules/nagaris');

class AsicIntegration extends IntegrationBase {
    static Definition = {
        name: 'asic',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'ASIC',
            description: 'Australian Securities and Investments Commission integration for form lodgement',
            category: 'Government & Compliance',
            detailsUrl: 'https://asic.gov.au',
            icon: 'https://asic.gov.au/themes/asic/logo.png',
        },
        modules: {
            asic: {
                definition: asic.Definition,
            },
            nagaris: {
                definition: nagaris.Definition,
            }
        },
        routes: [

            {
                path: '/form362',
                method: 'POST',
                event: 'SUBMIT_FORM_362',
            },
            {
                path: '/form484',
                method: 'POST',
                event: 'SUBMIT_FORM_484',
            },
            {
                path: '/company-details',
                method: 'GET',
                event: 'GET_COMPANY_DETAILS',
            },
            {
                path: '/compare-company',
                method: 'POST',
                event: 'COMPARE_COMPANY',
            },
        ],
    };

    constructor() {
        super();
        this.events = {

            SUBMIT_FORM_362: {
                handler: this.submitForm362.bind(this),
            },
            SUBMIT_FORM_484: {
                handler: this.submitForm484.bind(this),
            },
            GET_COMPANY_DETAILS: {
                handler: this.getCompanyDetails.bind(this),
            },
            COMPARE_COMPANY: {
                handler: this.compareCompany.bind(this),
            },
        };
    }

    /**
     * Submit Form 362 (Agent Appointment)
     */
    async submitForm362({ req, res }) {
        try {
            const {
                acn,
                companyName,
                agentNumber,
                agentName,
                agentAddress,
                signatoryName,
                signatoryCapacity,
                dateSigned,
            } = req.body;

            // Validate required fields
            if (!acn || !companyName || !agentNumber || !agentName || !agentAddress || !signatoryName || !dateSigned) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'All form fields are required for Form 362',
                });
            }

            // Validate ACN format (9 digits)
            if (!/^[0-9]{9}$/.test(acn)) {
                return res.status(400).json({
                    error: 'Invalid ACN',
                    message: 'ACN must be 9 digits',
                });
            }

            // Submit to ASIC
            const response = await this.asic.api.submitForm362({
                acn,
                companyName,
                agentNumber,
                agentName,
                agentAddress,
                signatoryName,
                signatoryCapacity: signatoryCapacity || 'DIR',
                dateSigned,
            });

            // Parse SOAP response
            const parsed = this.asic.api.parseSOAPResponse(response);

            if (parsed.success) {
                return res.json({
                    success: true,
                    message: 'Form 362 submitted successfully',
                    data: {
                        transactionNumber: parsed.transactionNumber,
                        status: parsed.status,
                    },
                });
            } else {
                return res.status(400).json({
                    error: 'Submission failed',
                    message: parsed.error || 'Form 362 submission was not successful',
                    data: {
                        status: parsed.status,
                    },
                });
            }
        } catch (error) {
            console.error('Form 362 submission error:', error);
            return res.status(500).json({
                error: 'Submission failed',
                message: error.message || 'An error occurred while submitting Form 362',
            });
        }
    }

    /**
     * Submit Form 484 (Company Details Change)
     */
    async submitForm484({ req, res }) {
        try {
            const {
                acn,
                changes,
                signatoryName,
                signatoryCapacity,
                dateSigned,
            } = req.body;

            // Validate required fields
            if (!acn || !changes || !signatoryName || !dateSigned) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'ACN, changes, signatory details, and date signed are required',
                });
            }

            // Validate ACN format
            if (!/^[0-9]{9}$/.test(acn)) {
                return res.status(400).json({
                    error: 'Invalid ACN',
                    message: 'ACN must be 9 digits',
                });
            }

            // Validate that at least one change is specified
            if (!changes.name && !changes.registeredOffice && !changes.principalPlaceOfBusiness) {
                return res.status(400).json({
                    error: 'No changes specified',
                    message: 'At least one change must be specified',
                });
            }

            // Submit to ASIC
            const response = await this.asic.api.submitForm484({
                acn,
                changes,
                signatoryName,
                signatoryCapacity: signatoryCapacity || 'DIR',
                dateSigned,
            });

            // Parse SOAP response
            const parsed = this.asic.api.parseSOAPResponse(response);

            if (parsed.success) {
                return res.json({
                    success: true,
                    message: 'Form 484 submitted successfully',
                    data: {
                        transactionNumber: parsed.transactionNumber,
                        status: parsed.status,
                    },
                });
            } else {
                return res.status(400).json({
                    error: 'Submission failed',
                    message: parsed.error || 'Form 484 submission was not successful',
                    data: {
                        status: parsed.status,
                    },
                });
            }
        } catch (error) {
            console.error('Form 484 submission error:', error);
            return res.status(500).json({
                error: 'Submission failed',
                message: error.message || 'An error occurred while submitting Form 484',
            });
        }
    }

    /**
     * Get Company Details from ASIC (RA71 request)
     */
    async getCompanyDetails({ req, res }) {
        try {
            const { acn, companyName, requestType } = req.query;

            // Validate required fields
            if (!acn || !companyName) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'ACN and company name are required',
                });
            }

            // Validate ACN format (9 digits)
            if (!/^[0-9]{9}$/.test(acn)) {
                return res.status(400).json({
                    error: 'Invalid ACN',
                    message: 'ACN must be 9 digits',
                });
            }

            // Request company details from ASIC
            const response = await this.asic.api.requestCompanyDetails({
                acn,
                companyName,
                requestType: requestType || 'DATA',
            });

            // Parse RA72 response
            const parsed = this.asic.api.parseRA72Response(response);

            if (parsed.success) {
                return res.json({
                    success: true,
                    message: 'Company details retrieved successfully',
                    data: parsed.company,
                });
            } else {
                return res.status(400).json({
                    error: 'Retrieval failed',
                    message: 'Unable to retrieve company details from ASIC',
                });
            }
        } catch (error) {
            console.error('Company details retrieval error:', error);
            return res.status(500).json({
                error: 'Retrieval failed',
                message: error.message || 'An error occurred while retrieving company details',
            });
        }
    }

    /**
     * Compare Company Details between ASIC and Nagaris
     */
    async compareCompany({ req, res }) {
        try {
            const { acn, companyName } = req.body;

            // Validate required fields
            if (!acn || !companyName) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'ACN and company name are required',
                });
            }

            // Validate ACN format
            if (!/^[0-9]{9}$/.test(acn)) {
                return res.status(400).json({
                    error: 'Invalid ACN',
                    message: 'ACN must be 9 digits',
                });
            }

            // Get ASIC data
            const asicResponse = await this.asic.api.requestCompanyDetails({
                acn,
                companyName,
                requestType: 'DATA',
            });

            const asicData = this.asic.api.parseRA72Response(asicResponse);

            if (!asicData.success) {
                return res.status(400).json({
                    error: 'ASIC retrieval failed',
                    message: 'Unable to retrieve company details from ASIC',
                });
            }

            // Get Nagaris data
            let nagarisData = null;
            try {
                nagarisData = await this.nagaris.api.getCompanyByACN(acn);
            } catch (nagarisError) {
                console.warn('Nagaris retrieval error:', nagarisError.message);
            }

            // Compare the data
            const comparison = this.compareCompanyData(asicData.company, nagarisData);

            return res.json({
                success: true,
                message: 'Company comparison completed',
                data: {
                    asic: asicData.company,
                    nagaris: nagarisData,
                    comparison,
                },
            });
        } catch (error) {
            console.error('Company comparison error:', error);
            return res.status(500).json({
                error: 'Comparison failed',
                message: error.message || 'An error occurred while comparing company details',
            });
        }
    }

    /**
     * Compare company data between ASIC and Nagaris
     * Returns differences and match status
     */
    compareCompanyData(asicCompany, nagarisCompany) {
        const differences = [];
        const matches = [];

        if (!nagarisCompany) {
            return {
                status: 'no_nagaris_data',
                message: 'No Nagaris data available for comparison',
                differences: [],
                matches: [],
            };
        }

        // Compare company name
        if (asicCompany.name && nagarisCompany.name) {
            if (asicCompany.name.trim().toLowerCase() === nagarisCompany.name.trim().toLowerCase()) {
                matches.push({ field: 'name', value: asicCompany.name });
            } else {
                differences.push({
                    field: 'name',
                    asic: asicCompany.name,
                    nagaris: nagarisCompany.name,
                });
            }
        }

        // Compare ACN
        if (asicCompany.acn && nagarisCompany.acn) {
            if (asicCompany.acn === nagarisCompany.acn) {
                matches.push({ field: 'acn', value: asicCompany.acn });
            } else {
                differences.push({
                    field: 'acn',
                    asic: asicCompany.acn,
                    nagaris: nagarisCompany.acn,
                });
            }
        }

        // Compare registered office address
        if (asicCompany.registeredOffice && nagarisCompany.registeredOffice) {
            const asicAddress = this.normalizeAddress(asicCompany.registeredOffice);
            const nagarisAddress = this.normalizeAddress(nagarisCompany.registeredOffice);

            if (asicAddress === nagarisAddress) {
                matches.push({ field: 'registeredOffice', value: asicAddress });
            } else {
                differences.push({
                    field: 'registeredOffice',
                    asic: asicCompany.registeredOffice,
                    nagaris: nagarisCompany.registeredOffice,
                });
            }
        }

        // Compare status
        if (asicCompany.status && nagarisCompany.status) {
            if (asicCompany.status.toLowerCase() === nagarisCompany.status.toLowerCase()) {
                matches.push({ field: 'status', value: asicCompany.status });
            } else {
                differences.push({
                    field: 'status',
                    asic: asicCompany.status,
                    nagaris: nagarisCompany.status,
                });
            }
        }

        return {
            status: differences.length === 0 ? 'match' : 'mismatch',
            message: differences.length === 0
                ? 'All compared fields match'
                : `Found ${differences.length} difference(s)`,
            differences,
            matches,
            totalFields: differences.length + matches.length,
        };
    }

    /**
     * Normalize address for comparison
     */
    normalizeAddress(address) {
        if (!address) return '';

        if (typeof address === 'string') {
            return address.trim().toLowerCase().replace(/\s+/g, ' ');
        }

        // If address is an object, concatenate fields
        const parts = [
            address.street,
            address.suburb,
            address.state,
            address.postcode,
        ].filter(Boolean);

        return parts.join(' ').trim().toLowerCase().replace(/\s+/g, ' ');
    }
}

module.exports = AsicIntegration;
