const { IntegrationBase } = require('@friggframework/core');
const karbonhq = require('../api-modules/karbonhq');

class KarbonHqIntegration extends IntegrationBase {
    static Definition = {
        name: 'karbonhq',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'KarbonHQ',
            description: 'Syncs client and entity data with this popular, modern practice management and workflow tool',
            category: 'Practice Management',
            detailsUrl: 'https://karbonhq.com',
            icon: 'https://www.karbonhq.com/hubfs/favicon.png',
        },
        modules: {
            karbonhq: {
                definition: karbonhq.Definition,
            },
        },
        routes: [
            {
                path: '/auth',
                method: 'GET',
                event: 'AUTH_REQUEST',
            },
            {
                path: '/auth',
                method: 'POST',
                event: 'HANDLE_AUTH',
            },
            {
                path: '/sync/client',
                method: 'POST',
                event: 'SYNC_CLIENT',
            },
            {
                path: '/sync/entity',
                method: 'POST',
                event: 'SYNC_ENTITY',
            },
            {
                path: '/contacts',
                method: 'GET',
                event: 'LIST_CONTACTS',
            },
            {
                path: '/organizations',
                method: 'GET',
                event: 'LIST_ORGANIZATIONS',
            },
            {
                path: '/client-groups',
                method: 'GET',
                event: 'LIST_CLIENT_GROUPS',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            AUTH_REQUEST: {
                handler: this.authRequest.bind(this),
            },
            HANDLE_AUTH: {
                handler: this.handleAuth.bind(this),
            },
            SYNC_CLIENT: {
                handler: this.syncClient.bind(this),
            },
            SYNC_ENTITY: {
                handler: this.syncEntity.bind(this),
            },
            LIST_CONTACTS: {
                handler: this.listContacts.bind(this),
            },
            LIST_ORGANIZATIONS: {
                handler: this.listOrganizations.bind(this),
            },
            LIST_CLIENT_GROUPS: {
                handler: this.listClientGroups.bind(this),
            },
        };
    }

    /**
     * Return the credentials form configuration for KarbonHQ authentication
     */
    async authRequest({ res }) {
        return res.json({
            url: null,
            type: 'credentials',
            data: {
                jsonSchema: {
                    title: 'KarbonHQ API Authentication',
                    type: 'object',
                    required: ['applicationId', 'accessKey'],
                    properties: {
                        applicationId: {
                            type: 'string',
                            title: 'Application ID',
                            description: 'Your KarbonHQ Application ID (shorter value)',
                        },
                        accessKey: {
                            type: 'string',
                            title: 'Access Key',
                            description: 'Your KarbonHQ Access Key (JWT token)',
                        },
                    },
                },
                uiSchema: {
                    applicationId: {
                        'ui:placeholder': '60a39912-382f-40a2...',
                        'ui:help': 'Found in your KarbonHQ API settings',
                    },
                    accessKey: {
                        'ui:widget': 'password',
                        'ui:placeholder': 'eyJ0eXAiOiJKV1QiL...',
                        'ui:help': 'Your tenant access key (JWT format)',
                    },
                },
            },
        });
    }

    /**
     * Handle KarbonHQ authentication
     */
    async handleAuth({ req, res }) {
        try {
            const { applicationId, accessKey } = req.body;

            if (!applicationId || !accessKey) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Application ID and Access Key are required',
                });
            }

            // Set credentials on API instance
            await this.karbonhq.api.setCredential({
                applicationId,
                accessKey,
            });

            // Test authentication
            try {
                await this.karbonhq.api.listContacts({ limit: 1 });
            } catch (error) {
                return res.status(401).json({
                    error: 'Authentication failed',
                    message: 'Invalid credentials or unable to connect to KarbonHQ',
                });
            }

            return res.json({
                success: true,
                message: 'Authentication successful',
                data: {
                    authenticated: true,
                },
            });
        } catch (error) {
            console.error('KarbonHQ authentication error:', error);
            return res.status(500).json({
                error: 'Authentication failed',
                message: 'An error occurred during authentication',
            });
        }
    }

    /**
     * Sync client data to KarbonHQ
     * Use case: Syncs client data with KarbonHQ practice management tool
     */
    async syncClient({ req, res }) {
        try {
            const { name, email, organizationName, additionalData } = req.body;

            if (!name || !email) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Client name and email are required',
                });
            }

            const result = await this.karbonhq.api.syncClient({
                name,
                email,
                organizationName,
                additionalData,
            });

            return res.json({
                success: true,
                message: 'Client synced successfully',
                data: result,
            });
        } catch (error) {
            console.error('Sync client error:', error);
            return res.status(500).json({
                error: 'Failed to sync client',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Sync entity data to KarbonHQ
     * Use case: Syncs entity/organization data with KarbonHQ
     */
    async syncEntity({ req, res }) {
        try {
            const { name, additionalData } = req.body;

            if (!name) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Entity name is required',
                });
            }

            const result = await this.karbonhq.api.syncEntity({
                name,
                additionalData,
            });

            return res.json({
                success: true,
                message: 'Entity synced successfully',
                data: result,
            });
        } catch (error) {
            console.error('Sync entity error:', error);
            return res.status(500).json({
                error: 'Failed to sync entity',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * List contacts
     */
    async listContacts({ req, res }) {
        try {
            const contacts = await this.karbonhq.api.listContacts(req.query);

            return res.json({
                success: true,
                data: contacts,
            });
        } catch (error) {
            console.error('List contacts error:', error);
            return res.status(500).json({
                error: 'Failed to list contacts',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * List organizations
     */
    async listOrganizations({ req, res }) {
        try {
            const organizations = await this.karbonhq.api.listOrganizations(req.query);

            return res.json({
                success: true,
                data: organizations,
            });
        } catch (error) {
            console.error('List organizations error:', error);
            return res.status(500).json({
                error: 'Failed to list organizations',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * List client groups
     */
    async listClientGroups({ req, res }) {
        try {
            const clientGroups = await this.karbonhq.api.listClientGroups(req.query);

            return res.json({
                success: true,
                data: clientGroups,
            });
        } catch (error) {
            console.error('List client groups error:', error);
            return res.status(500).json({
                error: 'Failed to list client groups',
                message: error.message || 'An error occurred',
            });
        }
    }
}

module.exports = KarbonHqIntegration;
