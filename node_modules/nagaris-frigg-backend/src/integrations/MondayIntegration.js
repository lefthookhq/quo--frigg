const { IntegrationBase } = require('@friggframework/core');
const monday = require('../api-modules/monday');

class MondayIntegration extends IntegrationBase {
    static Definition = {
        name: 'monday',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'Monday.com',
            description: 'Links services in Nagaris to tasks in Monday.com for better project and workflow tracking',
            category: 'Project Management',
            detailsUrl: 'https://monday.com',
            icon: 'https://dapulse-res.cloudinary.com/image/upload/f_auto,q_auto/remote_mondaycom_static/img/monday-logos/logo-square.png',
        },
        modules: {
            monday: {
                definition: monday.Definition,
            },
        },
        routes: [
            {
                path: '/auth',
                method: 'GET',
                event: 'AUTH_REQUEST',
            },
            {
                path: '/callback',
                method: 'GET',
                event: 'HANDLE_CALLBACK',
            },
            {
                path: '/boards',
                method: 'GET',
                event: 'LIST_BOARDS',
            },
            {
                path: '/boards/:boardId/items',
                method: 'GET',
                event: 'LIST_ITEMS',
            },
            {
                path: '/items',
                method: 'POST',
                event: 'CREATE_ITEM',
            },
            {
                path: '/items/:itemId',
                method: 'PATCH',
                event: 'UPDATE_ITEM',
            },
            {
                path: '/items/:itemId/link-service',
                method: 'POST',
                event: 'LINK_SERVICE',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            AUTH_REQUEST: {
                handler: this.authRequest.bind(this),
            },
            HANDLE_CALLBACK: {
                handler: this.handleCallback.bind(this),
            },
            LIST_BOARDS: {
                handler: this.listBoards.bind(this),
            },
            LIST_ITEMS: {
                handler: this.listItems.bind(this),
            },
            CREATE_ITEM: {
                handler: this.createItem.bind(this),
            },
            UPDATE_ITEM: {
                handler: this.updateItem.bind(this),
            },
            LINK_SERVICE: {
                handler: this.linkService.bind(this),
            },
        };
    }

    /**
     * Initiate OAuth flow
     */
    async authRequest({ req, res }) {
        const authUrl = this.monday.api.authorizationUri;

        return res.json({
            url: authUrl,
            type: 'oauth2',
        });
    }

    /**
     * Handle OAuth callback
     */
    async handleCallback({ req, res }) {
        try {
            const { code } = req.query;

            if (!code) {
                return res.status(400).json({
                    error: 'Missing code',
                    message: 'Authorization code not found in callback',
                });
            }

            // Exchange code for token
            const tokenResponse = await this.monday.api.getTokenFromCode(code);

            // Set credentials
            await this.monday.api.setTokens(tokenResponse);

            // Test authentication
            try {
                await this.monday.api.getAccount();
            } catch (error) {
                return res.status(401).json({
                    error: 'Authentication failed',
                    message: 'Invalid token or unable to connect to Monday.com',
                });
            }

            return res.json({
                success: true,
                message: 'Authentication successful',
                data: {
                    authenticated: true,
                },
            });
        } catch (error) {
            console.error('Monday callback error:', error);
            return res.status(500).json({
                error: 'Authentication failed',
                message: 'An error occurred during authentication',
            });
        }
    }

    /**
     * List boards
     */
    async listBoards({ req, res }) {
        try {
            const response = await this.monday.api.getBoards(req.query);

            return res.json({
                success: true,
                data: response.data.boards,
            });
        } catch (error) {
            console.error('List boards error:', error);
            return res.status(500).json({
                error: 'Failed to list boards',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * List items in a board
     */
    async listItems({ req, res }) {
        try {
            const { boardId } = req.params;

            if (!boardId) {
                return res.status(400).json({
                    error: 'Missing board ID',
                    message: 'Board ID is required',
                });
            }

            const items = await this.monday.api.getBoardItems(boardId, req.query);

            return res.json({
                success: true,
                data: items,
            });
        } catch (error) {
            console.error('List items error:', error);
            return res.status(500).json({
                error: 'Failed to list items',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Create a new item (task)
     */
    async createItem({ req, res }) {
        try {
            const { boardId, itemName, columnValues } = req.body;

            if (!boardId || !itemName) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Board ID and item name are required',
                });
            }

            const item = await this.monday.api.createItem({
                boardId,
                itemName,
                columnValues: columnValues || {},
            });

            return res.json({
                success: true,
                message: 'Item created successfully',
                data: item,
            });
        } catch (error) {
            console.error('Create item error:', error);
            return res.status(500).json({
                error: 'Failed to create item',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Update an item
     */
    async updateItem({ req, res }) {
        try {
            const { itemId } = req.params;
            const { boardId, columnValues } = req.body;

            if (!itemId || !boardId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Item ID and board ID are required',
                });
            }

            const result = await this.monday.api.updateItem({
                boardId,
                itemId,
                columnValues: columnValues || {},
            });

            return res.json({
                success: true,
                message: 'Item updated successfully',
                data: result,
            });
        } catch (error) {
            console.error('Update item error:', error);
            return res.status(500).json({
                error: 'Failed to update item',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Link a Nagaris service to a Monday item
     * Use case: Links services in Nagaris to tasks in Monday.com for better project and workflow tracking
     */
    async linkService({ req, res }) {
        try {
            const { itemId } = req.params;
            const { serviceId, serviceType, linkColumnTitle } = req.body;

            if (!itemId || !serviceId || !serviceType) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Item ID, service ID, and service type are required',
                });
            }

            const result = await this.monday.api.linkServiceToItem({
                itemId,
                serviceId,
                serviceType,
                linkColumnTitle: linkColumnTitle || 'Nagaris Link',
            });

            return res.json({
                success: true,
                message: 'Service linked to Monday item successfully',
                data: result,
            });
        } catch (error) {
            console.error('Link service error:', error);
            return res.status(500).json({
                error: 'Failed to link service',
                message: error.message || 'An error occurred',
            });
        }
    }
}

module.exports = MondayIntegration;
