const { IntegrationBase } = require('@friggframework/core');
const suitefiles = require('../api-modules/suitefiles');
const nagaris = require('../api-modules/nagaris');

class SuiteFilesIntegration extends IntegrationBase {
    static Definition = {
        name: 'suitefiles',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'SuiteFiles',
            description: 'Document management and file storage integration for client files',
            category: 'Document Management',
            detailsUrl: 'https://suitefiles.com',
            icon: 'https://suitefiles.com/logo.png',
        },
        modules: {
            suitefiles: {
                definition: suitefiles.Definition,
            },
            nagaris: {
                definition: nagaris.Definition,
            }
        },
        routes: [
            // Client Management
            {
                path: '/clients/search',
                method: 'GET',
                event: 'SEARCH_CLIENTS',
            },
            {
                path: '/clients',
                method: 'POST',
                event: 'CREATE_CLIENT',
            },
            {
                path: '/clients/:clientId',
                method: 'GET',
                event: 'GET_CLIENT',
            },
            {
                path: '/clients/:clientId/link',
                method: 'POST',
                event: 'LINK_CLIENT',
            },

            // Folder Management
            {
                path: '/clients/:clientId/folders',
                method: 'GET',
                event: 'GET_CLIENT_FOLDERS',
            },
            {
                path: '/folders',
                method: 'POST',
                event: 'CREATE_FOLDER',
            },
            {
                path: '/folders/:folderId',
                method: 'GET',
                event: 'GET_FOLDER',
            },
            {
                path: '/folders/:folderId/contents',
                method: 'GET',
                event: 'GET_FOLDER_CONTENTS',
            },
            {
                path: '/folders/:folderId',
                method: 'DELETE',
                event: 'DELETE_FOLDER',
            },
            {
                path: '/folders/create-structure',
                method: 'POST',
                event: 'CREATE_CLIENT_FOLDER_STRUCTURE',
            },

            // File Management
            {
                path: '/clients/:clientId/files',
                method: 'GET',
                event: 'GET_CLIENT_FILES',
            },
            {
                path: '/files/:fileId',
                method: 'GET',
                event: 'GET_FILE',
            },
            {
                path: '/files/upload',
                method: 'POST',
                event: 'UPLOAD_FILE',
            },
            {
                path: '/files/:fileId/download',
                method: 'GET',
                event: 'DOWNLOAD_FILE',
            },
            {
                path: '/files/:fileId',
                method: 'DELETE',
                event: 'DELETE_FILE',
            },

            // Item Actions (Star/Unstar)
            {
                path: '/items/:itemId/star',
                method: 'POST',
                event: 'STAR_ITEM',
            },
            {
                path: '/items/:itemId/star',
                method: 'DELETE',
                event: 'UNSTAR_ITEM',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            // Client Management
            SEARCH_CLIENTS: {
                handler: this.searchClients.bind(this),
            },
            CREATE_CLIENT: {
                handler: this.createClient.bind(this),
            },
            GET_CLIENT: {
                handler: this.getClient.bind(this),
            },
            LINK_CLIENT: {
                handler: this.linkClient.bind(this),
            },

            // Folder Management
            GET_CLIENT_FOLDERS: {
                handler: this.getClientFolders.bind(this),
            },
            CREATE_FOLDER: {
                handler: this.createFolder.bind(this),
            },
            GET_FOLDER: {
                handler: this.getFolder.bind(this),
            },
            GET_FOLDER_CONTENTS: {
                handler: this.getFolderContents.bind(this),
            },
            DELETE_FOLDER: {
                handler: this.deleteFolder.bind(this),
            },
            CREATE_CLIENT_FOLDER_STRUCTURE: {
                handler: this.createClientFolderStructure.bind(this),
            },

            // File Management
            GET_CLIENT_FILES: {
                handler: this.getClientFiles.bind(this),
            },
            GET_FILE: {
                handler: this.getFile.bind(this),
            },
            UPLOAD_FILE: {
                handler: this.uploadFile.bind(this),
            },
            DOWNLOAD_FILE: {
                handler: this.downloadFile.bind(this),
            },
            DELETE_FILE: {
                handler: this.deleteFile.bind(this),
            },

            // Item Actions
            STAR_ITEM: {
                handler: this.starItem.bind(this),
            },
            UNSTAR_ITEM: {
                handler: this.unstarItem.bind(this),
            },
        };
    }

    /**
     * Search for SuiteFiles clients
     */
    async searchClients({ req, res }) {
        try {
            const { q: query } = req.query;

            if (!query) {
                return res.status(400).json({
                    error: 'Missing query parameter',
                    message: 'Search query is required',
                });
            }

            // Get all clients and filter by query
            const clients = await this.suitefiles.api.listClients();
            const filteredClients = clients.filter(client =>
                client.name.toLowerCase().includes(query.toLowerCase())
            );

            return res.json({
                success: true,
                data: filteredClients,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to search clients',
                message: error.message,
            });
        }
    }

    /**
     * Create a new client in SuiteFiles
     */
    async createClient({ req, res }) {
        try {
            const { name, nagarisClientId } = req.body;

            if (!name) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Client name is required',
                });
            }

            // Create client in SuiteFiles
            const newClient = await this.suitefiles.api.createClient({ name });

            // If nagarisClientId is provided, link the clients
            if (nagarisClientId) {
                await this.linkClientToNagaris(newClient.id, nagarisClientId);
            }

            return res.json({
                success: true,
                data: newClient,
                message: 'Client created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create client',
                message: error.message,
            });
        }
    }

    /**
     * Get client details by ID
     */
    async getClient({ req, res }) {
        try {
            const { clientId } = req.params;

            const client = await this.suitefiles.api.getClient(clientId);

            return res.json({
                success: true,
                data: client,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get client',
                message: error.message,
            });
        }
    }

    /**
     * Link a SuiteFiles client to a Nagaris client
     */
    async linkClient({ req, res }) {
        try {
            const { clientId } = req.params;
            const { nagarisClientId } = req.body;

            if (!nagarisClientId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Nagaris client ID is required',
                });
            }

            await this.linkClientToNagaris(clientId, nagarisClientId);

            return res.json({
                success: true,
                message: 'Client linked successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to link client',
                message: error.message,
            });
        }
    }

    /**
     * Get folders for a specific client
     */
    async getClientFolders({ req, res }) {
        try {
            const { clientId } = req.params;

            const folders = await this.suitefiles.api.getClientFolders(clientId);

            return res.json({
                success: true,
                data: folders,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get client folders',
                message: error.message,
            });
        }
    }

    /**
     * Create a new folder
     */
    async createFolder({ req, res }) {
        try {
            const { name, parentId, clientId } = req.body;

            if (!name) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Folder name is required',
                });
            }

            const folder = await this.suitefiles.api.createFolder({
                name,
                parentId,
                clientId,
            });

            return res.json({
                success: true,
                data: folder,
                message: 'Folder created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create folder',
                message: error.message,
            });
        }
    }

    /**
     * Get folder details by ID
     */
    async getFolder({ req, res }) {
        try {
            const { folderId } = req.params;

            const folder = await this.suitefiles.api.getFolder(folderId);

            return res.json({
                success: true,
                data: folder,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get folder',
                message: error.message,
            });
        }
    }

    /**
     * Get folder contents (files and subfolders)
     */
    async getFolderContents({ req, res }) {
        try {
            const { folderId } = req.params;

            const contents = await this.suitefiles.api.getFolderContents(folderId);

            return res.json({
                success: true,
                data: contents,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get folder contents',
                message: error.message,
            });
        }
    }

    /**
     * Delete a folder
     */
    async deleteFolder({ req, res }) {
        try {
            const { folderId } = req.params;

            await this.suitefiles.api.deleteFolder(folderId);

            return res.json({
                success: true,
                message: 'Folder deleted successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to delete folder',
                message: error.message,
            });
        }
    }

    /**
     * Create standardized folder structure for a client
     * This is a user action that creates a complete folder hierarchy
     */
    async createClientFolderStructure({ req, res }) {
        try {
            const { clientId, clientName, folderStructure } = req.body;

            if (!clientId || !clientName) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Client ID and client name are required',
                });
            }

            const result = await this.suitefiles.api.createClientFolderStructure({
                clientId,
                clientName,
                folderStructure,
            });

            return res.json({
                success: true,
                data: result,
                message: 'Client folder structure created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create client folder structure',
                message: error.message,
            });
        }
    }

    /**
     * Get files for a specific client
     */
    async getClientFiles({ req, res }) {
        try {
            const { clientId } = req.params;
            const { limit = 50, offset = 0 } = req.query;

            const files = await this.suitefiles.api.listFiles({
                clientId,
                limit: parseInt(limit),
                offset: parseInt(offset),
            });

            return res.json({
                success: true,
                data: files,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get client files',
                message: error.message,
            });
        }
    }

    /**
     * Get file details by ID
     */
    async getFile({ req, res }) {
        try {
            const { fileId } = req.params;

            const file = await this.suitefiles.api.getFile(fileId);

            return res.json({
                success: true,
                data: file,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get file',
                message: error.message,
            });
        }
    }

    /**
     * Upload a file
     */
    async uploadFile({ req, res }) {
        try {
            const { folderId, file, filename } = req.body;

            if (!folderId || !file || !filename) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Folder ID, file, and filename are required',
                });
            }

            const uploadedFile = await this.suitefiles.api.uploadFile({
                folderId,
                file,
                filename,
            });

            return res.json({
                success: true,
                data: uploadedFile,
                message: 'File uploaded successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to upload file',
                message: error.message,
            });
        }
    }

    /**
     * Download a file
     */
    async downloadFile({ req, res }) {
        try {
            const { fileId } = req.params;

            const fileStream = await this.suitefiles.api.downloadFile(fileId);

            // Set appropriate headers for file download
            res.setHeader('Content-Type', 'application/octet-stream');
            res.setHeader('Content-Disposition', `attachment; filename="${fileId}"`);

            fileStream.pipe(res);
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to download file',
                message: error.message,
            });
        }
    }

    /**
     * Delete a file
     */
    async deleteFile({ req, res }) {
        try {
            const { fileId } = req.params;

            await this.suitefiles.api.deleteFile(fileId);

            return res.json({
                success: true,
                message: 'File deleted successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to delete file',
                message: error.message,
            });
        }
    }

    /**
     * Star an item (file or folder)
     */
    async starItem({ req, res }) {
        try {
            const { starred = true } = req.body;

            // Note: The current API doesn't have star functionality
            // This would need to be implemented in the SuiteFiles API module
            // For now, we'll return a success response

            return res.json({
                success: true,
                message: starred ? 'Item starred successfully' : 'Item unstarred successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to star item',
                message: error.message,
            });
        }
    }

    /**
     * Unstar an item (file or folder)
     */
    async unstarItem({ res }) {
        try {
            // Note: The current API doesn't have star functionality
            // This would need to be implemented in the SuiteFiles API module
            // For now, we'll return a success response

            return res.json({
                success: true,
                message: 'Item unstarred successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to unstar item',
                message: error.message,
            });
        }
    }

    /**
     * Helper method to link a SuiteFiles client to a Nagaris client
     * This would typically involve storing the relationship in a database
     */
    // eslint-disable-next-line no-unused-vars
    async linkClientToNagaris(suitefilesClientId, nagarisClientId) {
        // This is a placeholder for the actual implementation
        // In a real scenario, you would:
        // 1. Store the relationship in your database
        // 2. Update both systems with the link
        // 3. Handle any necessary data synchronization

        // For now, we'll just return success
        // In a real implementation, you'd use your database to store this relationship
        return { success: true };
    }
}

module.exports = SuiteFilesIntegration;
