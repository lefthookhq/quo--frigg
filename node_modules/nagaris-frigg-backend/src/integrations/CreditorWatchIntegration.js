const { IntegrationBase } = require('@friggframework/core');
const nagaris = require('../api-modules/nagaris');
const creditorwatch = require('../api-modules/creditor-watch');

class CreditorWatchIntegration extends IntegrationBase {
    static Definition = {
        name: 'creditorwatch',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'CreditorWatch',
            description: 'Credit risk assessment, monitoring, and compliance services for Australian businesses',
            category: 'Risk & Compliance',
            detailsUrl: 'https://creditorwatch.com.au',
            icon: 'https://creditorwatch.com.au/wp-content/uploads/2021/12/cw-favicon.ico',
        },
        modules: {
            nagaris: {
                definition: nagaris.Definition,
            },
            creditorwatch: {
                definition: creditorwatch.Definition,
            },
        },
        routes: [
            // Authentication
            {
                path: '/auth',
                method: 'GET',
                event: 'AUTH_REQUEST',
            },
            {
                path: '/auth',
                method: 'POST',
                event: 'HANDLE_NAGARIS_AUTH',
            },

            // Company Search & Profile
            {
                path: '/search',
                method: 'GET',
                event: 'SEARCH_COMPANIES',
            },
            {
                path: '/company/:identifier',
                method: 'GET',
                event: 'GET_COMPANY_DETAILS',
            },
            {
                path: '/company/:identifier/profile',
                method: 'GET',
                event: 'GET_COMPLETE_PROFILE',
            },

            // Directors & Shareholders
            {
                path: '/company/:identifier/directors',
                method: 'GET',
                event: 'GET_DIRECTORS',
            },
            {
                path: '/company/:identifier/shareholders',
                method: 'GET',
                event: 'GET_SHAREHOLDERS',
            },
            {
                path: '/company/:identifier/ubo-report',
                method: 'POST',
                event: 'GENERATE_UBO_REPORT',
            },
            {
                path: '/ubo-report/:reportId',
                method: 'GET',
                event: 'GET_UBO_REPORT',
            },
            {
                path: '/ubo-report/:reportId/download',
                method: 'GET',
                event: 'DOWNLOAD_UBO_REPORT',
            },

            // Credit & Risk
            {
                path: '/company/:identifier/credit-score',
                method: 'GET',
                event: 'GET_CREDIT_SCORE',
            },
            {
                path: '/company/:identifier/credit-history',
                method: 'GET',
                event: 'GET_CREDIT_HISTORY',
            },
            {
                path: '/company/:identifier/adverse-events',
                method: 'GET',
                event: 'GET_ADVERSE_EVENTS',
            },

            // ASIC & Addresses
            {
                path: '/company/:identifier/addresses',
                method: 'GET',
                event: 'GET_ADDRESSES',
            },
            {
                path: '/company/:identifier/asic-details',
                method: 'GET',
                event: 'GET_ASIC_DETAILS',
            },
            {
                path: '/company/:identifier/asic-documents',
                method: 'GET',
                event: 'GET_ASIC_DOCUMENTS',
            },

            // PPSR & Reports
            {
                path: '/company/:identifier/ppsr',
                method: 'GET',
                event: 'GET_PPSR_REGISTRATIONS',
            },
            {
                path: '/company/:identifier/financial-reports',
                method: 'GET',
                event: 'GET_FINANCIAL_REPORTS',
            },

            // Monitoring & Watchlist
            {
                path: '/company/:identifier/monitoring-status',
                method: 'GET',
                event: 'GET_MONITORING_STATUS',
            },
            {
                path: '/company/:identifier/watchlist',
                method: 'POST',
                event: 'ADD_TO_WATCHLIST',
            },
            {
                path: '/company/:identifier/watchlist',
                method: 'DELETE',
                event: 'REMOVE_FROM_WATCHLIST',
            },

            // Identity Verification (KYC)
            {
                path: '/verify/drivers-licence',
                method: 'POST',
                event: 'VERIFY_DRIVERS_LICENCE',
            },
            {
                path: '/verify/passport',
                method: 'POST',
                event: 'VERIFY_PASSPORT',
            },
            {
                path: '/verify/medicare',
                method: 'POST',
                event: 'VERIFY_MEDICARE',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            // Authentication
            AUTH_REQUEST: {
                handler: this.authRequest.bind(this),
            },
            HANDLE_NAGARIS_AUTH: {
                handler: this.handleNagarisAuth.bind(this),
            },

            // Company Search & Profile
            SEARCH_COMPANIES: {
                handler: this.searchCompanies.bind(this),
            },
            GET_COMPANY_DETAILS: {
                handler: this.getCompanyDetails.bind(this),
            },
            GET_COMPLETE_PROFILE: {
                handler: this.getCompleteProfile.bind(this),
            },

            // Directors & Shareholders
            GET_DIRECTORS: {
                handler: this.getDirectors.bind(this),
            },
            GET_SHAREHOLDERS: {
                handler: this.getShareholders.bind(this),
            },
            GENERATE_UBO_REPORT: {
                handler: this.generateUboReport.bind(this),
            },
            GET_UBO_REPORT: {
                handler: this.getUboReport.bind(this),
            },
            DOWNLOAD_UBO_REPORT: {
                handler: this.downloadUboReport.bind(this),
            },

            // Credit & Risk
            GET_CREDIT_SCORE: {
                handler: this.getCreditScore.bind(this),
            },
            GET_CREDIT_HISTORY: {
                handler: this.getCreditHistory.bind(this),
            },
            GET_ADVERSE_EVENTS: {
                handler: this.getAdverseEvents.bind(this),
            },

            // ASIC & Addresses
            GET_ADDRESSES: {
                handler: this.getAddresses.bind(this),
            },
            GET_ASIC_DETAILS: {
                handler: this.getAsicDetails.bind(this),
            },
            GET_ASIC_DOCUMENTS: {
                handler: this.getAsicDocuments.bind(this),
            },

            // PPSR & Reports
            GET_PPSR_REGISTRATIONS: {
                handler: this.getPpsrRegistrations.bind(this),
            },
            GET_FINANCIAL_REPORTS: {
                handler: this.getFinancialReports.bind(this),
            },

            // Monitoring & Watchlist
            GET_MONITORING_STATUS: {
                handler: this.getMonitoringStatus.bind(this),
            },
            ADD_TO_WATCHLIST: {
                handler: this.addToWatchlist.bind(this),
            },
            REMOVE_FROM_WATCHLIST: {
                handler: this.removeFromWatchlist.bind(this),
            },

            // Identity Verification (KYC)
            VERIFY_DRIVERS_LICENCE: {
                handler: this.verifyDriversLicence.bind(this),
            },
            VERIFY_PASSPORT: {
                handler: this.verifyPassport.bind(this),
            },
            VERIFY_MEDICARE: {
                handler: this.verifyMedicare.bind(this),
            },
        };
    }

    // Return the email form configuration for Nagaris authorization
    async authRequest({ res }) {
        return res.json({
            url: null, // No redirect URL needed
            type: 'email',
            data: {
                jsonSchema: {
                    title: 'Nagaris Authorization',
                    type: 'object',
                    required: ['email'],
                    properties: {
                        email: {
                            type: 'string',
                            format: 'email',
                            title: 'Email',
                            description: 'Your Nagaris account email',
                        },
                    },
                },
                uiSchema: {
                    email: {
                        'ui:help': 'Enter your Nagaris account email address',
                        'ui:placeholder': 'your.email@example.com',
                    },
                },
            },
        });
    }

    // Handle two-step authentication flow
    async handleNagarisAuth({ req, res }) {
        try {
            const { email, otp } = req.body;

            // Step 1: Email submission - request OTP
            if (email && !otp) {
                try {
                    await this.nagaris.api.requestEmailLogin(email);
                } catch (error) {
                    return res.status(400).json({
                        error: 'Failed to send OTP',
                        message:
                            'Unable to send OTP to the provided email address',
                    });
                }

                // Return OTP form for user to enter verification code
                return res.json({
                    url: null,
                    type: 'otp',
                    data: {
                        jsonSchema: {
                            title: 'Enter Verification Code',
                            type: 'object',
                            required: ['otp'],
                            properties: {
                                email: {
                                    type: 'string',
                                    format: 'email',
                                    title: 'Email',
                                    default: email,
                                    readOnly: true,
                                },
                                otp: {
                                    type: 'string',
                                    title: 'Verification Code',
                                    description:
                                        'Enter the OTP sent to your email',
                                },
                            },
                        },
                        uiSchema: {
                            email: {
                                'ui:readonly': true,
                                'ui:help':
                                    'OTP will be sent to this email address',
                            },
                            otp: {
                                'ui:help':
                                    'Enter the 6-digit verification code sent to your email',
                                'ui:placeholder': '000000',
                            },
                        },
                    },
                });
            }

            // Step 2: OTP verification
            if (email && otp) {
                let authData;
                try {
                    authData = await this.nagaris.api.verifyOtp(email, otp);
                } catch (error) {
                    return res.status(400).json({
                        error: 'Invalid verification code',
                        message: 'The OTP code is incorrect or has expired',
                    });
                }

                // Successfully authenticated - return success response
                return res.json({
                    success: true,
                    message: 'Authentication successful',
                    data: {
                        email: email,
                        authenticated: true,
                        authData: authData,
                    },
                });
            }

            // Invalid request - missing required fields
            return res.status(400).json({
                error: 'Invalid request',
                message: 'Either email or both email and OTP must be provided',
            });
        } catch (error) {
            console.error('Authentication error:', error);
            return res.status(500).json({
                error: 'Authentication failed',
                message: 'An error occurred during authentication',
            });
        }
    }

    // ========================================
    // Company Search & Profile Handlers
    // ========================================

    /**
     * Search for companies by name, ACN, or ABN
     * GET /search?q=company+name&limit=10
     */
    async searchCompanies({ req, res }) {
        try {
            const { q, name, acn, abn, limit, offset } = req.query;

            const searchParams = {
                name: name || q,
                acn,
                abn,
                limit: limit ? parseInt(limit) : 25,
                offset: offset ? parseInt(offset) : 0,
            };

            const results = await this.creditorwatch.api.searchCompanies(searchParams);

            return res.json({
                success: true,
                data: results,
            });
        } catch (error) {
            console.error('Search companies error:', error);
            return res.status(500).json({
                error: 'Failed to search companies',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get basic company details
     * GET /company/:identifier
     */
    async getCompanyDetails({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const customProfile = await this.creditorwatch.api.getCustomProfile({
                ...cleanIdentifier,
                asic_extract_type: 'current',
                anzsic: 'true',
            });

            const details = this._transformCompanyDetails(customProfile);

            return res.json({
                success: true,
                data: details,
            });
        } catch (error) {
            console.error('Get company details error:', error);
            return res.status(500).json({
                error: 'Failed to get company details',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get complete company profile (all data combined)
     * GET /company/:identifier/profile
     */
    async getCompleteProfile({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);
            const orgNumber = cleanIdentifier.acn || cleanIdentifier.abn;

            // Fetch all data in parallel
            const [
                customProfile,
                businessProfile,
                asicDocs,
                watchlistStatus,
            ] = await Promise.allSettled([
                this.creditorwatch.api.getCustomProfile({
                    ...cleanIdentifier,
                    credit_report: 'true',
                    credit_score: 'true',
                    credit_rating: 'true',
                    asic_extract_type: 'current',
                    ppsr_search: 'true',
                    comprehensive_report: 'true',
                    anzsic: 'true',
                }),
                this.creditorwatch.api.getBusinessProfileSummary(orgNumber),
                this.creditorwatch.api.getAsicDocuments(cleanIdentifier.acn),
                this.creditorwatch.api.checkWatchlistStatus(cleanIdentifier),
            ]);

            const profile = {
                company: this._transformCompanyDetails(customProfile.value),
                directors: this._transformDirectors(businessProfile.value),
                addresses: this._transformAddresses(customProfile.value),
                creditScore: this._transformCreditScore(customProfile.value),
                creditHistory: this._transformCreditHistory(customProfile.value),
                adverseEvents: this._transformAdverseEvents(customProfile.value),
                ppsrRegistrations: this._transformPpsr(customProfile.value),
                asicDetails: this._transformAsicDetails(asicDocs.value, customProfile.value),
                monitoring: this._transformMonitoring(watchlistStatus.value),
                retrievedAt: new Date().toISOString(),
            };

            return res.json({
                success: true,
                data: profile,
            });
        } catch (error) {
            console.error('Get complete profile error:', error);
            return res.status(500).json({
                error: 'Failed to get complete profile',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // Directors & Shareholders Handlers
    // ========================================

    /**
     * Get directors list
     * GET /company/:identifier/directors
     */
    async getDirectors({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);
            const orgNumber = cleanIdentifier.acn || cleanIdentifier.abn;

            const businessProfile = await this.creditorwatch.api.getBusinessProfileSummary(orgNumber);
            const directors = this._transformDirectors(businessProfile);

            return res.json({
                success: true,
                data: directors,
            });
        } catch (error) {
            console.error('Get directors error:', error);
            return res.status(500).json({
                error: 'Failed to get directors',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get shareholders structure
     * GET /company/:identifier/shareholders
     */
    async getShareholders({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);
            const orgNumber = cleanIdentifier.acn || cleanIdentifier.abn;

            // Try to get UBO report for shareholder data
            const uboResponse = await this.creditorwatch.api.generateUboReport({
                organisationNumber: orgNumber,
            });

            if (uboResponse.reportId) {
                const uboReport = await this.creditorwatch.api.getUboReport(uboResponse.reportId);
                const shareholders = this._transformShareholders(uboReport);

                return res.json({
                    success: true,
                    data: {
                        shareholders,
                        uboReportId: uboResponse.reportId,
                    },
                });
            }

            return res.json({
                success: true,
                data: {
                    shareholders: [],
                    message: 'UBO report generation pending or unavailable',
                },
            });
        } catch (error) {
            console.error('Get shareholders error:', error);
            return res.status(500).json({
                error: 'Failed to get shareholders',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Generate UBO report
     * POST /company/:identifier/ubo-report
     */
    async generateUboReport({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);
            const orgNumber = cleanIdentifier.acn || cleanIdentifier.abn;

            const response = await this.creditorwatch.api.generateUboReport({
                organisationNumber: orgNumber,
            });

            return res.json({
                success: true,
                data: {
                    reportId: response.reportId,
                    status: response.status || 'pending',
                    generatedAt: new Date().toISOString(),
                },
            });
        } catch (error) {
            console.error('Generate UBO report error:', error);
            return res.status(500).json({
                error: 'Failed to generate UBO report',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get UBO report by ID
     * GET /ubo-report/:reportId
     */
    async getUboReport({ req, res }) {
        try {
            const { reportId } = req.params;

            const report = await this.creditorwatch.api.getUboReport(reportId);

            return res.json({
                success: true,
                data: report,
            });
        } catch (error) {
            console.error('Get UBO report error:', error);
            return res.status(500).json({
                error: 'Failed to get UBO report',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Download UBO report PDF
     * GET /ubo-report/:reportId/download
     */
    async downloadUboReport({ req, res }) {
        try {
            const { reportId } = req.params;

            const pdfData = await this.creditorwatch.api.downloadUboReport(reportId);

            // Set headers for PDF download
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="ubo-report-${reportId}.pdf"`);

            return res.send(pdfData);
        } catch (error) {
            console.error('Download UBO report error:', error);
            return res.status(500).json({
                error: 'Failed to download UBO report',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // Credit & Risk Handlers
    // ========================================

    /**
     * Get current credit score
     * GET /company/:identifier/credit-score
     */
    async getCreditScore({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const scoreData = await this.creditorwatch.api.getCreditScore({
                ...cleanIdentifier,
                credit_rating: 'true',
                include_payment_predictor: 'true',
            });

            const creditScore = this._transformCreditScore(scoreData);

            return res.json({
                success: true,
                data: creditScore,
            });
        } catch (error) {
            console.error('Get credit score error:', error);
            return res.status(500).json({
                error: 'Failed to get credit score',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get 12-month credit history
     * GET /company/:identifier/credit-history
     */
    async getCreditHistory({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const scoreData = await this.creditorwatch.api.getCreditScore({
                ...cleanIdentifier,
                credit_rating: 'true',
            });

            const history = this._transformCreditHistory(scoreData);

            return res.json({
                success: true,
                data: history,
            });
        } catch (error) {
            console.error('Get credit history error:', error);
            return res.status(500).json({
                error: 'Failed to get credit history',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get adverse events (court actions, payment defaults, etc.)
     * GET /company/:identifier/adverse-events
     */
    async getAdverseEvents({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const creditReport = await this.creditorwatch.api.getCreditReport({
                ...cleanIdentifier,
                lenders: 'true',
                'ato-tax-default': 'true',
            });

            const adverseEvents = this._transformAdverseEvents(creditReport);

            return res.json({
                success: true,
                data: adverseEvents,
            });
        } catch (error) {
            console.error('Get adverse events error:', error);
            return res.status(500).json({
                error: 'Failed to get adverse events',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // ASIC & Addresses Handlers
    // ========================================

    /**
     * Get company addresses
     * GET /company/:identifier/addresses
     */
    async getAddresses({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const asicExtract = await this.creditorwatch.api.purchaseExtract({
                ...cleanIdentifier,
                type: 'current',
            });

            const addresses = this._transformAddresses(asicExtract);

            return res.json({
                success: true,
                data: addresses,
            });
        } catch (error) {
            console.error('Get addresses error:', error);
            return res.status(500).json({
                error: 'Failed to get addresses',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get ASIC details and review dates
     * GET /company/:identifier/asic-details
     */
    async getAsicDetails({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const asicExtract = await this.creditorwatch.api.purchaseExtract({
                ...cleanIdentifier,
                type: 'current',
            });

            const details = this._transformAsicDetails(null, asicExtract);

            return res.json({
                success: true,
                data: details,
            });
        } catch (error) {
            console.error('Get ASIC details error:', error);
            return res.status(500).json({
                error: 'Failed to get ASIC details',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get ASIC documents
     * GET /company/:identifier/asic-documents
     */
    async getAsicDocuments({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            if (!cleanIdentifier.acn) {
                return res.status(400).json({
                    error: 'ACN required',
                    message: 'ACN is required to fetch ASIC documents',
                });
            }

            const documents = await this.creditorwatch.api.getAsicDocuments(cleanIdentifier.acn);

            return res.json({
                success: true,
                data: documents,
            });
        } catch (error) {
            console.error('Get ASIC documents error:', error);
            return res.status(500).json({
                error: 'Failed to get ASIC documents',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // PPSR & Reports Handlers
    // ========================================

    /**
     * Get PPSR registrations
     * GET /company/:identifier/ppsr
     */
    async getPpsrRegistrations({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const customProfile = await this.creditorwatch.api.getCustomProfile({
                ...cleanIdentifier,
                ppsr_search: 'true',
            });

            const ppsr = this._transformPpsr(customProfile);

            return res.json({
                success: true,
                data: ppsr,
            });
        } catch (error) {
            console.error('Get PPSR registrations error:', error);
            return res.status(500).json({
                error: 'Failed to get PPSR registrations',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Get financial reports
     * GET /company/:identifier/financial-reports
     */
    async getFinancialReports({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            // Get ASIC documents which may include financial reports
            const documents = cleanIdentifier.acn
                ? await this.creditorwatch.api.getAsicDocuments(cleanIdentifier.acn)
                : { documents: [] };

            const financialReports = this._transformFinancialReports(documents);

            return res.json({
                success: true,
                data: financialReports,
            });
        } catch (error) {
            console.error('Get financial reports error:', error);
            return res.status(500).json({
                error: 'Failed to get financial reports',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // Monitoring & Watchlist Handlers
    // ========================================

    /**
     * Get monitoring status and alerts
     * GET /company/:identifier/monitoring-status
     */
    async getMonitoringStatus({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const status = await this.creditorwatch.api.checkWatchlistStatus(cleanIdentifier);
            const monitoring = this._transformMonitoring(status);

            return res.json({
                success: true,
                data: monitoring,
            });
        } catch (error) {
            console.error('Get monitoring status error:', error);
            return res.status(500).json({
                error: 'Failed to get monitoring status',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Add company to watchlist
     * POST /company/:identifier/watchlist
     */
    async addToWatchlist({ req, res }) {
        try {
            const { identifier } = req.params;
            const { customAccountId } = req.body;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const result = await this.creditorwatch.api.addToWatchlist({
                ...cleanIdentifier,
                customAccountId,
            });

            return res.json({
                success: true,
                message: 'Company added to watchlist',
                data: result,
            });
        } catch (error) {
            console.error('Add to watchlist error:', error);
            return res.status(500).json({
                error: 'Failed to add to watchlist',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Remove company from watchlist
     * DELETE /company/:identifier/watchlist
     */
    async removeFromWatchlist({ req, res }) {
        try {
            const { identifier } = req.params;
            const cleanIdentifier = this._cleanIdentifier(identifier);

            const result = await this.creditorwatch.api.removeFromWatchlist(cleanIdentifier);

            return res.json({
                success: true,
                message: 'Company removed from watchlist',
                data: result,
            });
        } catch (error) {
            console.error('Remove from watchlist error:', error);
            return res.status(500).json({
                error: 'Failed to remove from watchlist',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // Identity Verification (KYC) Handlers
    // ========================================

    /**
     * Verify driver's licence
     * POST /verify/drivers-licence
     */
    async verifyDriversLicence({ req, res }) {
        try {
            const result = await this.creditorwatch.api.verifyDriversLicence(req.body);

            return res.json({
                success: true,
                data: result,
            });
        } catch (error) {
            console.error('Verify drivers licence error:', error);
            return res.status(500).json({
                error: 'Failed to verify drivers licence',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Verify passport
     * POST /verify/passport
     */
    async verifyPassport({ req, res }) {
        try {
            const result = await this.creditorwatch.api.verifyPassport(req.body);

            return res.json({
                success: true,
                data: result,
            });
        } catch (error) {
            console.error('Verify passport error:', error);
            return res.status(500).json({
                error: 'Failed to verify passport',
                message: error.message || 'An error occurred',
            });
        }
    }

    /**
     * Verify Medicare card
     * POST /verify/medicare
     */
    async verifyMedicare({ req, res }) {
        try {
            const result = await this.creditorwatch.api.verifyMedicare(req.body);

            return res.json({
                success: true,
                data: result,
            });
        } catch (error) {
            console.error('Verify Medicare error:', error);
            return res.status(500).json({
                error: 'Failed to verify Medicare',
                message: error.message || 'An error occurred',
            });
        }
    }

    // ========================================
    // Helper Methods for Data Transformation
    // ========================================

    /**
     * Clean and normalize identifier (ACN/ABN)
     */
    _cleanIdentifier(identifier) {
        const cleaned = identifier.replace(/\s/g, '');

        // Check if it's an ACN (9 digits) or ABN (11 digits)
        if (/^\d{9}$/.test(cleaned)) {
            return { acn: cleaned };
        } else if (/^\d{11}$/.test(cleaned)) {
            return { abn: cleaned };
        }

        // If not a number, might be a name - return as-is for search
        return { acn: identifier, abn: identifier };
    }

    /**
     * Transform company details for frontend
     */
    _transformCompanyDetails(data) {
        if (!data) return null;

        return {
            companyName: data.company?.name || data.name,
            acn: data.company?.acn || data.acn,
            abn: data.company?.abn || data.abn,
            anzsic: data.anzsic ? {
                code: data.anzsic.code,
                description: data.anzsic.description,
            } : null,
            registrationDate: data.company?.registrationDate || data.registrationDate,
            gstRegistered: data.company?.gstRegistered || data.gstRegistered,
            status: data.company?.status || data.status,
            type: data.company?.type || data.type,
            source: 'creditorwatch',
        };
    }

    /**
     * Transform directors data for frontend
     */
    _transformDirectors(data) {
        if (!data?.directors) return { directors: [] };

        return {
            directors: data.directors.map(director => ({
                name: `${director.givenName || ''} ${director.familyName || ''}`.trim() || director.name,
                roles: director.roles || ['Director'],
                appointedDate: director.appointedDate,
                ceasedDate: director.ceasedDate || null,
                verificationStatus: 'pending',
                source: 'creditorwatch',
            })),
        };
    }

    /**
     * Transform shareholders data for frontend
     */
    _transformShareholders(data) {
        if (!data?.shareholders) return [];

        return data.shareholders.map(shareholder => ({
            name: shareholder.name,
            shareCount: shareholder.shareCount || 0,
            percentage: shareholder.percentage || 0,
            shareClass: shareholder.shareClass || 'Ordinary',
            source: 'creditorwatch',
        }));
    }

    /**
     * Transform credit score data for frontend
     */
    _transformCreditScore(data) {
        if (!data) return null;

        return {
            score: data.creditScore?.score || data.score,
            maxScore: 1000,
            rating: data.creditScore?.rating || data.rating,
            riskLevel: this._getRiskLevel(data.creditScore?.rating || data.rating),
            riskDescription: this._getRiskDescription(data.creditScore?.rating || data.rating),
            scoreDate: data.creditScore?.date || data.date || new Date().toISOString(),
            paymentPredictor: data.paymentPredictor || null,
        };
    }

    /**
     * Transform credit history for frontend
     */
    _transformCreditHistory(data) {
        if (!data?.creditHistory) return { history: [] };

        return {
            history: data.creditHistory.map(item => ({
                month: item.month || item.date,
                score: item.score,
                rating: item.rating,
                date: item.date,
            })),
        };
    }

    /**
     * Transform adverse events for frontend
     */
    _transformAdverseEvents(data) {
        if (!data) return { alertCount: 0, courtActions: [], paymentDefaults: [] };

        const courtActions = (data.courtActions || []).map(action => ({
            plaintiff: action.plaintiff,
            amount: action.amount,
            currency: 'AUD',
            status: action.status,
            filedDate: action.filedDate,
            court: action.court,
            caseNumber: action.caseNumber,
            source: 'creditorwatch',
        }));

        const paymentDefaults = (data.paymentDefaults || []).map(def => ({
            creditor: def.creditor,
            amount: def.amount,
            currency: 'AUD',
            status: def.status,
            defaultDate: def.defaultDate,
            paidDate: def.paidDate || null,
            source: 'creditorwatch',
        }));

        return {
            alertCount: courtActions.length + paymentDefaults.length,
            courtActions,
            paymentDefaults,
            atoTaxDefaults: data.atoTaxDefaults || [],
        };
    }

    /**
     * Transform addresses for frontend
     */
    _transformAddresses(data) {
        if (!data) return null;

        return {
            registeredOffice: data.registeredOffice ? {
                fullAddress: data.registeredOffice.fullAddress,
                street: data.registeredOffice.street,
                suburb: data.registeredOffice.suburb,
                state: data.registeredOffice.state,
                postcode: data.registeredOffice.postcode,
                country: 'Australia',
                source: 'creditorwatch',
            } : null,
            principalPlaceOfBusiness: data.principalPlaceOfBusiness ? {
                fullAddress: data.principalPlaceOfBusiness.fullAddress,
                street: data.principalPlaceOfBusiness.street,
                suburb: data.principalPlaceOfBusiness.suburb,
                state: data.principalPlaceOfBusiness.state,
                postcode: data.principalPlaceOfBusiness.postcode,
                country: 'Australia',
                source: 'creditorwatch',
            } : null,
        };
    }

    /**
     * Transform PPSR registrations for frontend
     */
    _transformPpsr(data) {
        if (!data?.ppsr?.registrations) return { registrations: [] };

        return {
            registrations: data.ppsr.registrations.map(reg => ({
                registrationNumber: reg.registrationNumber,
                collateralType: reg.collateralType,
                collateralDescription: reg.collateralDescription,
                securedParty: reg.securedParty,
                registrationDate: reg.registrationDate,
                expiryDate: reg.expiryDate,
                status: reg.status || 'active',
                source: 'creditorwatch',
            })),
        };
    }

    /**
     * Transform ASIC details for frontend
     */
    _transformAsicDetails(asicDocs, asicExtract) {
        const extract = asicExtract || {};

        return {
            nextReviewDate: extract.nextReviewDate,
            reviewType: extract.reviewType,
            lodgementHistory: asicDocs?.documents || [],
            source: 'creditorwatch',
        };
    }

    /**
     * Transform financial reports for frontend
     */
    _transformFinancialReports(data) {
        if (!data?.documents) return { reports: [] };

        const financialDocs = data.documents.filter(doc =>
            doc.documentType?.toLowerCase().includes('financial') ||
            doc.documentType?.toLowerCase().includes('annual')
        );

        return {
            reports: financialDocs.map(doc => ({
                year: doc.year || new Date(doc.lodgedDate).getFullYear(),
                reportType: doc.documentType,
                status: 'available',
                downloadUrl: doc.downloadUrl || null,
                source: 'creditorwatch',
            })),
        };
    }

    /**
     * Transform monitoring status for frontend
     */
    _transformMonitoring(data) {
        if (!data) return { enabled: false, alerts: [] };

        return {
            enabled: data.onWatchlist || false,
            addedDate: data.addedDate,
            alertCount: data.alerts?.length || 0,
            recentAlerts: (data.alerts || []).map(alert => ({
                type: alert.type,
                date: alert.date,
                description: alert.description,
            })),
        };
    }

    /**
     * Get risk level from credit rating
     */
    _getRiskLevel(rating) {
        if (!rating) return 'unknown';

        const ratingUpper = rating.toUpperCase();
        if (ratingUpper.startsWith('A')) return 'excellent';
        if (ratingUpper.startsWith('B')) return 'good';
        if (ratingUpper.startsWith('C')) return 'fair';
        if (ratingUpper.startsWith('D')) return 'poor';
        return 'high-risk';
    }

    /**
     * Get risk description from credit rating
     */
    _getRiskDescription(rating) {
        const level = this._getRiskLevel(rating);
        const descriptions = {
            excellent: 'Excellent credit risk',
            good: 'Good credit risk',
            fair: 'Fair credit risk',
            poor: 'Poor credit risk',
            'high-risk': 'High credit risk',
            unknown: 'Credit risk unknown',
        };
        return descriptions[level] || 'Credit risk assessment unavailable';
    }
}

module.exports = CreditorWatchIntegration;
