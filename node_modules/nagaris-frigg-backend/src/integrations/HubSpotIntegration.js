const {
    get,
    IntegrationBase,
    WebsocketConnection,
} = require('@friggframework/core');
const hubspot = require('@friggframework/api-module-hubspot');

class HubSpotIntegration extends IntegrationBase {
    static Definition = {
        name: 'hubspot',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: true,

        display: {
            label: 'HubSpot',
            description: hubspot.Config.description,
            category: 'Sales & CRM, Marketing',
            detailsUrl: 'https://hubspot.com',
            icon: hubspot.Config.logoUrl,
        },
        modules: {
            hubspot: {
                definition: hubspot.Definition,
            },
        },
        routes: [
            {
                path: '/auth',
                method: 'GET',
                event: 'AUTH_REQUEST',
            },
            {
                path: '/callback',
                method: 'GET',
                event: 'HANDLE_CALLBACK',
            },
            {
                path: '/webhooks',
                method: 'POST',
                event: 'HUBSPOT_WEBHOOK',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            AUTH_REQUEST: {
                handler: this.handleAuthRequest,
            },
            HANDLE_CALLBACK: {
                handler: this.handleCallback,
            },
            HUBSPOT_WEBHOOK: {
                handler: async ({ data, context }) => {
                    // Implement your webhook logic here
                    console.log('Received HubSpot webhook:', data);

                    // Get all active WebSocket connections
                    const activeConnections =
                        await WebsocketConnection.getActiveConnections();

                    // Prepare the message to send
                    const message = JSON.stringify({
                        type: 'HUBSPOT_WEBHOOK',
                        data,
                    });

                    // Send the message to all active connections
                    activeConnections.forEach((connection) => {
                        connection.send(message);
                    });
                },
            },
            SEARCH_DEALS: {
                handler: this.searchDeals,
            },
            GET_SAMPLE_DATA: {
                type: 'USER_ACTION',
                handler: this.getSampleData,
                title: 'Get Sample Data',
                description:
                    'Get sample data from HubSpot and display in a formatted table',
                userActionType: 'QUICK_ACTION',
            },
            GET_OBJECT_LIST: {
                type: 'USER_ACTION',
                handler: this.getObjectList,
                title: 'Get Object List',
                description: 'Get list of available HubSpot objects',
                userActionType: 'DATA',
            },
            CREATE_RECORD: {
                type: 'USER_ACTION',
                handler: this.createRecord,
                title: 'Create Record',
                description: 'Create a new record in HubSpot',
                userActionType: 'DATA',
            },
        };
    }

    async handleAuthRequest({ req, res }) {
        const authUrl = await this.hubspot.api.getAuthUri();
        res.redirect(authUrl);
    }

    async handleCallback({ req, res }) {
        const { code } = req.query;
        if (!code) {
            return res.status(400).json({ error: 'Authorization code is required' });
        }

        try {
            await this.hubspot.api.getTokenFromCode(code);
            res.redirect('/integrations');
        } catch (error) {
            console.error('Error handling HubSpot callback:', error);
            res.status(500).json({ error: 'Failed to complete authorization' });
        }
    }

    async searchDeals(searchQuery) {
        const res = await this.hubspot.api.searchDeals({ q: searchQuery });
        return { data: res.results };
    }

    async getSampleData({ objectName }) {
        let res;
        switch (objectName) {
            case 'deals':
                res = await this.hubspot.api.searchDeals({
                    properties: ['dealname,amount,closedate'],
                });
                break;
            case 'contacts':
                res = await this.hubspot.api.listContacts({
                    after: 0,
                    properties: 'firstname,lastname,email',
                });
                break;
            case 'companies':
                res = await this.hubspot.api.searchCompanies({
                    properties: ['name,website,email'],
                    limit: 100,
                });
                break;
            default:
                throw new Error(`Unsupported object type: ${objectName}`);
        }

        const portalId = this.hubspot.entity.externalId;

        const formatted = res.results.map((item) => {
            const formattedItem = {
                linkToRecord: `https://app.hubspot.com/contacts/${portalId}/${objectName}/${item.id}/`,
                id: item.id,
            };

            for (const [key, value] of Object.entries(item.properties)) {
                if (value !== null && value !== undefined && value !== '') {
                    formattedItem[key] = value;
                }
            }
            delete formattedItem.hs_object_id;

            return formattedItem;
        });

        return { label: objectName, data: formatted };
    }

    async getObjectList() {
        return [
            { key: 'deals', label: 'Deals' },
            { key: 'contacts', label: 'Contacts' },
            { key: 'companies', label: 'Companies' },
        ];
    }

    async createRecord(args) {
        let res;
        const objectType = args.objectType;
        delete args.objectType;
        switch (objectType.toLowerCase()) {
            case 'deal':
                res = await this.hubspot.api.createDeal({ ...args });
                break;
            case 'company':
                res = await this.hubspot.api.createCompany({ ...args });
                break;
            case 'contact':
                res = await this.hubspot.api.createContact({ ...args });
                break;
            default:
                throw new Error(`Unsupported object type: ${objectType}`);
        }
        return { data: res };
    }

    async getActionOptions({ actionId, data }) {
        switch (actionId) {
            case 'CREATE_RECORD':
                let jsonSchema = {
                    type: 'object',
                    properties: {
                        objectType: {
                            type: 'string',
                            title: 'Object Type',
                        },
                    },
                    required: [],
                };
                let uiSchema = {
                    type: 'HorizontalLayout',
                    elements: [
                        {
                            type: 'Control',
                            scope: '#/properties/objectType',
                            rule: {
                                effect: 'HIDE',
                                condition: {},
                            },
                        },
                    ],
                };

                switch (data.name.toLowerCase()) {
                    case 'deal':
                        jsonSchema.properties = {
                            ...jsonSchema.properties,
                            dealname: { type: 'string', title: 'Deal Name' },
                            amount: { type: 'number', title: 'Amount' },
                        };
                        jsonSchema.required = ['dealname', 'amount'];
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/dealname',
                        });
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/amount',
                        });
                        break;
                    case 'company':
                        jsonSchema.properties = {
                            ...jsonSchema.properties,

                            name: { type: 'string', title: 'Company Name' },
                            website: { type: 'string', title: 'Website URL' },
                        };
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/name',
                        });
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/website',
                        });
                        jsonSchema.required = ['name', 'website'];
                        break;
                    case 'contact':
                        jsonSchema.properties = {
                            ...jsonSchema.properties,

                            firstname: { type: 'string', title: 'First Name' },
                            lastname: { type: 'string', title: 'Last Name' },
                            email: { type: 'string', title: 'Email Address' },
                        };
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/firstname',
                        });
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/lastname',
                        });
                        uiSchema.elements.push({
                            type: 'Control',
                            scope: '#/properties/email',
                        });
                        jsonSchema.required = [
                            'firstname',
                            'lastname',
                            'email',
                        ];
                        break;
                    default:
                        throw new Error(
                            `Unsupported object type: ${data.name}`
                        );
                }

                return {
                    jsonSchema,
                    uiSchema,
                    data: {
                        objectType: data.name,
                    },
                };
        }
        return null;
    }

    async onCreate(params) {
        this.record.status = 'ENABLED';
        await this.record.save();
        return this.record;
    }

    async onUpdate(params) {
        const newConfig = get(params, 'config');
        const oldConfig = this.record.config;
        this.record.markModified('config');
        await this.record.save();
        return this.validateConfig();
    }

    async getConfigOptions() {
        const options = {};
        return options;
    }
}

module.exports = HubSpotIntegration;
