const { IntegrationBase } = require('@friggframework/core');
const fyi = require('../api-modules/fyi');
const nagaris = require('../api-modules/nagaris');

class FYIDocsIntegration extends IntegrationBase {
    static Definition = {
        name: 'fyi-docs',
        version: '1.0.0',
        supportedVersions: ['1.0.0'],
        hasUserConfig: false,

        display: {
            label: 'FYI Docs',
            description: 'Document management integration for automatic document sync and folder structure management',
            category: 'Document Management',
            detailsUrl: 'https://developers.fyi.app',
            icon: 'https://fyi.app/logo.png',
        },
        modules: {
            fyi: {
                definition: fyi.Definition,
            },
            nagaris: {
                definition: nagaris.Definition,
            }
        },
        routes: [
            // Client Management
            {
                path: '/clients',
                method: 'GET',
                event: 'LIST_CLIENTS',
            },
            {
                path: '/clients/:clientId',
                method: 'GET',
                event: 'GET_CLIENT',
            },
            {
                path: '/clients',
                method: 'POST',
                event: 'CREATE_CLIENT',
            },
            {
                path: '/clients/:clientId/sync',
                method: 'POST',
                event: 'SYNC_CLIENT_TO_FYI',
            },

            // Client Groups
            {
                path: '/client-groups',
                method: 'GET',
                event: 'LIST_CLIENT_GROUPS',
            },
            {
                path: '/client-groups',
                method: 'POST',
                event: 'CREATE_CLIENT_GROUP',
            },

            // Folder Management
            {
                path: '/clients/:clientId/folders',
                method: 'GET',
                event: 'GET_CLIENT_FOLDERS',
            },
            {
                path: '/folders',
                method: 'POST',
                event: 'CREATE_FOLDER',
            },
            {
                path: '/folders/:folderId',
                method: 'GET',
                event: 'GET_FOLDER',
            },
            {
                path: '/folders/:folderId/contents',
                method: 'GET',
                event: 'GET_FOLDER_CONTENTS',
            },
            {
                path: '/folders/create-structure',
                method: 'POST',
                event: 'CREATE_CLIENT_FOLDER_STRUCTURE',
            },

            // Document Management
            {
                path: '/documents/upload',
                method: 'POST',
                event: 'UPLOAD_DOCUMENT',
            },
            {
                path: '/documents/:documentId',
                method: 'GET',
                event: 'GET_DOCUMENT',
            },
            {
                path: '/documents/:documentId/download',
                method: 'GET',
                event: 'DOWNLOAD_DOCUMENT',
            },
            {
                path: '/documents/search',
                method: 'GET',
                event: 'SEARCH_DOCUMENTS',
            },

            // Document Sync (Main User Actions)
            {
                path: '/documents/sync-from-nagaris',
                method: 'POST',
                event: 'SYNC_DOCUMENT_FROM_NAGARIS',
            },
            {
                path: '/documents/bulk-sync',
                method: 'POST',
                event: 'BULK_SYNC_DOCUMENTS',
            },
            {
                path: '/documents/sync-status',
                method: 'GET',
                event: 'GET_SYNC_STATUS',
            },
        ],
    };

    constructor() {
        super();
        this.events = {
            // Client Management
            LIST_CLIENTS: {
                handler: this.listClients.bind(this),
            },
            GET_CLIENT: {
                handler: this.getClient.bind(this),
            },
            CREATE_CLIENT: {
                handler: this.createClient.bind(this),
            },
            SYNC_CLIENT_TO_FYI: {
                handler: this.syncClientToFYI.bind(this),
            },

            // Client Groups
            LIST_CLIENT_GROUPS: {
                handler: this.listClientGroups.bind(this),
            },
            CREATE_CLIENT_GROUP: {
                handler: this.createClientGroup.bind(this),
            },

            // Folder Management
            GET_CLIENT_FOLDERS: {
                handler: this.getClientFolders.bind(this),
            },
            CREATE_FOLDER: {
                handler: this.createFolder.bind(this),
            },
            GET_FOLDER: {
                handler: this.getFolder.bind(this),
            },
            GET_FOLDER_CONTENTS: {
                handler: this.getFolderContents.bind(this),
            },
            CREATE_CLIENT_FOLDER_STRUCTURE: {
                handler: this.createClientFolderStructure.bind(this),
            },

            // Document Management
            UPLOAD_DOCUMENT: {
                handler: this.uploadDocument.bind(this),
            },
            GET_DOCUMENT: {
                handler: this.getDocument.bind(this),
            },
            DOWNLOAD_DOCUMENT: {
                handler: this.downloadDocument.bind(this),
            },
            SEARCH_DOCUMENTS: {
                handler: this.searchDocuments.bind(this),
            },

            // Document Sync (Main User Actions)
            SYNC_DOCUMENT_FROM_NAGARIS: {
                handler: this.syncDocumentFromNagaris.bind(this),
            },
            BULK_SYNC_DOCUMENTS: {
                handler: this.bulkSyncDocuments.bind(this),
            },
            GET_SYNC_STATUS: {
                handler: this.getSyncStatus.bind(this),
            },
        };
    }

    /**
     * List all FYI clients
     */
    async listClients({ req, res }) {
        try {
            const { limit = 50, offset = 0, search } = req.query;

            const clients = await this.fyi.api.listClients({
                limit: parseInt(limit),
                offset: parseInt(offset),
                search,
            });

            return res.json({
                success: true,
                data: clients,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to list clients',
                message: error.message,
            });
        }
    }

    /**
     * Get client details by ID
     */
    async getClient({ req, res }) {
        try {
            const { clientId } = req.params;

            const client = await this.fyi.api.getClient(clientId);

            return res.json({
                success: true,
                data: client,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get client',
                message: error.message,
            });
        }
    }

    /**
     * Create a new client in FYI
     */
    async createClient({ req, res }) {
        try {
            const { name, clientGroupId, details } = req.body;

            if (!name) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Client name is required',
                });
            }

            const client = await this.fyi.api.createClient({
                name,
                clientGroupId,
                details,
            });

            return res.json({
                success: true,
                data: client,
                message: 'Client created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create client',
                message: error.message,
            });
        }
    }

    /**
     * Sync a Nagaris client to FYI (create client and folder structure)
     */
    async syncClientToFYI({ req, res }) {
        try {
            const { clientId } = req.params;
            const { nagarisClientId, clientGroupId, financialYear } = req.body;

            if (!nagarisClientId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Nagaris client ID is required',
                });
            }

            // Get Nagaris client details
            const nagarisClient = await this.nagaris.api.getClient(nagarisClientId);

            // Create or find FYI client
            let fyiClient;
            try {
                fyiClient = await this.fyi.api.getClient(clientId);
            } catch (error) {
                // Client doesn't exist, create it
                fyiClient = await this.fyi.api.createClient({
                    name: nagarisClient.name,
                    clientGroupId,
                });
            }

            // Create folder structure
            const folderStructure = await this.fyi.api.createClientFolderStructure({
                clientId: fyiClient.id,
                clientName: fyiClient.name,
                clientGroupId,
                financialYear,
            });

            return res.json({
                success: true,
                data: {
                    fyiClient,
                    folderStructure,
                },
                message: 'Client synced to FYI successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to sync client to FYI',
                message: error.message,
            });
        }
    }

    /**
     * List client groups
     */
    async listClientGroups({ req, res }) {
        try {
            const { limit = 50, offset = 0 } = req.query;

            const clientGroups = await this.fyi.api.listClientGroups({
                limit: parseInt(limit),
                offset: parseInt(offset),
            });

            return res.json({
                success: true,
                data: clientGroups,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to list client groups',
                message: error.message,
            });
        }
    }

    /**
     * Create a new client group
     */
    async createClientGroup({ req, res }) {
        try {
            const { name, details } = req.body;

            if (!name) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Group name is required',
                });
            }

            const clientGroup = await this.fyi.api.createClientGroup({
                name,
                details,
            });

            return res.json({
                success: true,
                data: clientGroup,
                message: 'Client group created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create client group',
                message: error.message,
            });
        }
    }

    /**
     * Get folders for a specific client
     */
    async getClientFolders({ req, res }) {
        try {
            const { clientId } = req.params;
            const { folderType } = req.query;

            const folders = await this.fyi.api.getClientFolders(clientId, {
                folderType,
            });

            return res.json({
                success: true,
                data: folders,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get client folders',
                message: error.message,
            });
        }
    }

    /**
     * Create a new folder
     */
    async createFolder({ req, res }) {
        try {
            const { name, clientId, parentId, folderType } = req.body;

            if (!name || !clientId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Folder name and client ID are required',
                });
            }

            const folder = await this.fyi.api.createFolder({
                name,
                clientId,
                parentId,
                folderType,
            });

            return res.json({
                success: true,
                data: folder,
                message: 'Folder created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create folder',
                message: error.message,
            });
        }
    }

    /**
     * Get folder details by ID
     */
    async getFolder({ req, res }) {
        try {
            const { folderId } = req.params;

            const folder = await this.fyi.api.getFolder(folderId);

            return res.json({
                success: true,
                data: folder,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get folder',
                message: error.message,
            });
        }
    }

    /**
     * Get folder contents (documents and subfolders)
     */
    async getFolderContents({ req, res }) {
        try {
            const { folderId } = req.params;
            const { limit = 50, offset = 0 } = req.query;

            const contents = await this.fyi.api.getFolderContents(folderId, {
                limit: parseInt(limit),
                offset: parseInt(offset),
            });

            return res.json({
                success: true,
                data: contents,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get folder contents',
                message: error.message,
            });
        }
    }

    /**
     * Create standardized folder structure for a client
     * This is a key user action that creates the required folder hierarchy
     */
    async createClientFolderStructure({ req, res }) {
        try {
            const { clientId, clientName, clientGroupId, financialYear } = req.body;

            if (!clientId || !clientName) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Client ID and client name are required',
                });
            }

            const folderStructure = await this.fyi.api.createClientFolderStructure({
                clientId,
                clientName,
                clientGroupId,
                financialYear,
            });

            return res.json({
                success: true,
                data: folderStructure,
                message: 'Client folder structure created successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to create client folder structure',
                message: error.message,
            });
        }
    }

    /**
     * Upload a document to FYI
     */
    async uploadDocument({ req, res }) {
        try {
            const { folderId, file, filename, documentType, metadata } = req.body;

            if (!folderId || !file || !filename) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Folder ID, file, and filename are required',
                });
            }

            const document = await this.fyi.api.uploadDocument({
                folderId,
                file,
                filename,
                documentType,
                metadata,
            });

            return res.json({
                success: true,
                data: document,
                message: 'Document uploaded successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to upload document',
                message: error.message,
            });
        }
    }

    /**
     * Get document details by ID
     */
    async getDocument({ req, res }) {
        try {
            const { documentId } = req.params;

            const document = await this.fyi.api.getDocument(documentId);

            return res.json({
                success: true,
                data: document,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get document',
                message: error.message,
            });
        }
    }

    /**
     * Download a document
     */
    async downloadDocument({ req, res }) {
        try {
            const { documentId } = req.params;

            const documentStream = await this.fyi.api.downloadDocument(documentId);

            // Set appropriate headers for file download
            res.setHeader('Content-Type', 'application/octet-stream');
            res.setHeader('Content-Disposition', `attachment; filename="${documentId}"`);

            documentStream.pipe(res);
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to download document',
                message: error.message,
            });
        }
    }

    /**
     * Search documents
     */
    async searchDocuments({ req, res }) {
        try {
            const { query, clientId, folderId, documentType, limit = 50, offset = 0 } = req.query;

            const documents = await this.fyi.api.searchDocuments({
                query,
                clientId,
                folderId,
                documentType,
                limit: parseInt(limit),
                offset: parseInt(offset),
            });

            return res.json({
                success: true,
                data: documents,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to search documents',
                message: error.message,
            });
        }
    }

    /**
     * Sync a document from Nagaris to FYI
     * This is the main user action for document sync
     */
    async syncDocumentFromNagaris({ req, res }) {
        try {
            const { nagarisDocumentId, fyiClientId, folderType, documentType } = req.body;

            if (!nagarisDocumentId || !fyiClientId || !folderType || !documentType) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Nagaris document ID, FYI client ID, folder type, and document type are required',
                });
            }

            // Get document from Nagaris
            const nagarisDocument = await this.nagaris.api.getDocument(nagarisDocumentId);

            // Sync to FYI
            const syncResult = await this.fyi.api.syncDocumentFromNagaris({
                document: nagarisDocument,
                clientId: fyiClientId,
                folderType,
                documentType,
            });

            if (!syncResult.success) {
                return res.status(500).json({
                    error: 'Failed to sync document',
                    message: syncResult.error,
                });
            }

            return res.json({
                success: true,
                data: syncResult,
                message: 'Document synced successfully',
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to sync document from Nagaris',
                message: error.message,
            });
        }
    }

    /**
     * Bulk sync multiple documents from Nagaris to FYI
     * This is a key user action for batch document sync
     */
    async bulkSyncDocuments({ req, res }) {
        try {
            const { documents, fyiClientId, defaultFolderType } = req.body;

            if (!documents || !Array.isArray(documents) || !fyiClientId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Documents array and FYI client ID are required',
                });
            }

            const results = [];
            const errors = [];

            for (const doc of documents) {
                try {
                    const syncResult = await this.fyi.api.syncDocumentFromNagaris({
                        document: doc,
                        clientId: fyiClientId,
                        folderType: doc.folderType || defaultFolderType,
                        documentType: doc.documentType,
                    });

                    if (syncResult.success) {
                        results.push({
                            nagarisDocumentId: doc.id,
                            fyiDocumentId: syncResult.document.id,
                            success: true,
                        });
                    } else {
                        errors.push({
                            nagarisDocumentId: doc.id,
                            error: syncResult.error,
                        });
                    }
                } catch (error) {
                    errors.push({
                        nagarisDocumentId: doc.id,
                        error: error.message,
                    });
                }
            }

            return res.json({
                success: true,
                data: {
                    synced: results,
                    errors,
                    totalProcessed: documents.length,
                    successCount: results.length,
                    errorCount: errors.length,
                },
                message: `Bulk sync completed: ${results.length} successful, ${errors.length} failed`,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to bulk sync documents',
                message: error.message,
            });
        }
    }

    /**
     * Get sync status for documents
     */
    async getSyncStatus({ req, res }) {
        try {
            const { nagarisDocumentIds, fyiClientId } = req.query;

            if (!nagarisDocumentIds || !fyiClientId) {
                return res.status(400).json({
                    error: 'Missing required fields',
                    message: 'Nagaris document IDs and FYI client ID are required',
                });
            }

            const documentIds = nagarisDocumentIds.split(',');
            const syncStatus = [];

            for (const docId of documentIds) {
                try {
                    // Check if document exists in FYI with Nagaris metadata
                    const searchResults = await this.fyi.api.searchDocuments({
                        clientId: fyiClientId,
                        metadata: JSON.stringify({ nagarisDocumentId: docId }),
                    });

                    syncStatus.push({
                        nagarisDocumentId: docId,
                        synced: searchResults.length > 0,
                        fyiDocumentId: searchResults.length > 0 ? searchResults[0].id : null,
                        lastSyncDate: searchResults.length > 0 ? searchResults[0].metadata?.syncDate : null,
                    });
                } catch (error) {
                    syncStatus.push({
                        nagarisDocumentId: docId,
                        synced: false,
                        error: error.message,
                    });
                }
            }

            return res.json({
                success: true,
                data: syncStatus,
            });
        } catch (error) {
            return res.status(500).json({
                error: 'Failed to get sync status',
                message: error.message,
            });
        }
    }
}

module.exports = FYIDocsIntegration;
