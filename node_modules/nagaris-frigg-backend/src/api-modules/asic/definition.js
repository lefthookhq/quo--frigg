require('dotenv').config();
const { Api } = require('./api');
const config = require('./defaultConfig.json');

const Definition = {
    API: Api,
    getName: () => config.name,
    moduleName: config.name,
    modelName: 'ASIC',
    requiredAuthMethods: {
        getToken: async (api, params) => {
            // ASIC uses HTTP Basic Auth with username/password
            const username = params.username || params.data?.username;
            const password = params.password || params.data?.password;
            const senderId = params.senderId || params.data?.senderId;
            const senderType = params.senderType || params.data?.senderType;

            if (!username || !password || !senderId) {
                throw new Error('Username, password, and sender ID are required');
            }

            return {
                username,
                password,
                senderId,
                senderType: senderType || 'REGA'
            };
        },
        getEntityDetails: async (api, callbackParams, tokenResponse, userId) => {
            // For ASIC, we use the sender ID as the external identifier
            return {
                identifiers: {
                    externalId: tokenResponse.senderId,
                    user: userId
                },
                details: {
                    name: tokenResponse.username,
                    senderId: tokenResponse.senderId,
                    senderType: tokenResponse.senderType
                },
            };
        },
        apiPropertiesToPersist: {
            credential: ['username', 'password', 'senderId', 'senderType'],
            entity: [],
        },
        getCredentialDetails: async (api, userId) => {
            return {
                identifiers: {
                    externalId: api.senderId,
                    user: userId
                },
                details: {}
            };
        },
        testAuthRequest: async (api) => {
            // Test by attempting to construct a basic SOAP envelope
            // We can't really test without a valid ACN, so we just verify credentials are set
            if (!api.username || !api.password || !api.senderId) {
                throw new Error('Invalid credentials');
            }
            return { authenticated: true, senderId: api.senderId };
        },
    },
    env: {
        // No OAuth env variables needed for basic auth
    }
};

module.exports = { Definition };
