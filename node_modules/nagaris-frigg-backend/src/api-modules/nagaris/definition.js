require("dotenv").config();
const { Api } = require("./api");
const { get } = require("@friggframework/core");
const config = require("./defaultConfig.json");

const Definition = {
  API: Api,
  getName: function () {
    return config.name;
  },
  moduleName: config.name,
  modelName: "Nagaris",

  requiredAuthMethods: {
    getAuthorizationRequirements: async (api, params) => {
      return api.getAuthorizationRequirements();
    },
    // Process the collected email (no OAuth2 code exchange)
    getToken: async function (api, params) {
      const email = get(params.data, "email");

      // Set email on API instance for identification
      api.email = email;

      // Return email as "token" response
      return {
        email: email,
      };
    },

    getEntityDetails: async function (
      api,
      callbackParams,
      tokenResponse,
      userId
    ) {
      const userDetails = await api.getUserDetails();

      // Use user ID as external identifier
      const externalId = userDetails.id || userDetails.userId || userDetails.uuid;
      const name = userDetails.name || userDetails.username || userDetails.email || "Nagaris User";

      return {
        identifiers: {
          externalId: externalId,
          user: userId,
        },
        details: {
          name: name,
          email: userDetails.email,
        },
      };
    },

    // Persist email instead of OAuth tokens
    apiPropertiesToPersist: {
      credential: ["email"],
      entity: [],
    },

    getCredentialDetails: async function (api, userId) {
      const userDetails = await api.getUserDetails();

      const externalId = userDetails.id || userDetails.userId || userDetails.uuid;

      return {
        identifiers: {
          externalId: externalId,
          user: userId,
        },
        details: {},
      };
    },

    testAuthRequest: async function (api) {
      return api.getUserDetails();
    },
  },

  // No OAuth2 environment variables needed for API key auth
  env: {
    // Can include any service-specific config if needed
    // redirect_uri: `${process.env.REDIRECT_URI}/nagaris`,
  },
};

module.exports = { Definition };