const { OAuth2Requester, get } = require('@friggframework/core');

class Api extends OAuth2Requester {
    constructor(params) {
        super(params);

        // Email-based identification
        this.email = get(params, 'email', null);

        // Set base URL to default Nagaris API
        this.baseUrl = 'https://core.nagaris.com';

        this.URLs = {
            // Authentication endpoints
            authLoginEmail: '/api/v1/auth/login/email/',
            authLoginOtp: '/api/v1/auth/login/otp/',

            // User info endpoint (required for Frigg integration)
            userInfo: '/api/v1/profile/',

            // Client endpoints
            clients: '/api/v1/clients/',
            clientById: (id) => `/api/v1/clients/${id}/`,

            // Client-related endpoints
            clientAddresses: '/api/v1/client-addresses/',
            clientAddressById: (id) => `/api/v1/client-addresses/${id}/`,
            clientContacts: '/api/v1/client-contacts/',
            clientContactById: (id) => `/api/v1/client-contacts/${id}/`,
            clientDocuments: '/api/v1/client-documents/',
            clientDocumentById: (id) => `/api/v1/client-documents/${id}/`,
            clientDocumentDownload: (id) =>
                `/api/v1/client-documents/${id}/download/`,
            clientEmails: '/api/v1/client-emails/',
            clientEmailById: (id) => `/api/v1/client-emails/${id}/`,

            // Utility endpoints
            abnLookup: '/api/v1/abn/lookup/',
            addresses: '/api/v1/addresses/',
            addressSearch: '/api/v1/addresses/universal-search/',
        };
    }

    // Override to add email-based headers if needed
    addAuthHeaders(headers = {}) {
        const newHeaders = { ...headers };

        // Email-based authentication - add email to headers if needed by API
        if (this.email) {
            newHeaders['X-User-Email'] = this.email;
        }

        return newHeaders;
    }

    // Override HTTP methods to include authentication headers
    async _get(options) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._get(options);
    }

    async _post(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._post(options, stringify);
    }

    async _put(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._put(options, stringify);
    }

    async _patch(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._patch(options, stringify);
    }

    async _delete(options) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._delete(options);
    }

    // Required method for Frigg integration
    async getUserDetails() {
        const options = {
            url: this.baseUrl + this.URLs.userInfo,
        };
        return this._get(options);
    }

    // Client management methods
    async listClients(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clients,
            query: params,
        };
        return this._get(options);
    }

    async getClientById(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientById(id),
        };
        return this._get(options);
    }

    async updateClient(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientById(id),
            body: data,
        };
        return this._put(options);
    }

    async patchClient(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientById(id),
            body: data,
        };
        return this._patch(options);
    }

    // Client Address methods
    async listClientAddresses(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddresses,
            query: params,
        };
        return this._get(options);
    }

    async getClientAddress(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddressById(id),
        };
        return this._get(options);
    }

    async createClientAddress(data) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddresses,
            body: data,
        };
        return this._post(options);
    }

    async updateClientAddress(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddressById(id),
            body: data,
        };
        return this._put(options);
    }

    async patchClientAddress(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddressById(id),
            body: data,
        };
        return this._patch(options);
    }

    async deleteClientAddress(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientAddressById(id),
        };
        return this._delete(options);
    }

    // Client Contact methods
    async listClientContacts(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clientContacts,
            query: params,
        };
        return this._get(options);
    }

    async getClientContact(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientContactById(id),
        };
        return this._get(options);
    }

    async createClientContact(data) {
        const options = {
            url: this.baseUrl + this.URLs.clientContacts,
            body: data,
        };
        return this._post(options);
    }

    async updateClientContact(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientContactById(id),
            body: data,
        };
        return this._put(options);
    }

    async patchClientContact(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientContactById(id),
            body: data,
        };
        return this._patch(options);
    }

    async deleteClientContact(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientContactById(id),
        };
        return this._delete(options);
    }

    // Client Document methods
    async listClientDocuments(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocuments,
            query: params,
        };
        return this._get(options);
    }

    async getClientDocument(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocumentById(id),
        };
        return this._get(options);
    }

    async createClientDocument(data) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocuments,
            body: data,
        };
        return this._post(options);
    }

    async updateClientDocument(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocumentById(id),
            body: data,
        };
        return this._put(options);
    }

    async patchClientDocument(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocumentById(id),
            body: data,
        };
        return this._patch(options);
    }

    async deleteClientDocument(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocumentById(id),
        };
        return this._delete(options);
    }

    async downloadClientDocument(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientDocumentDownload(id),
        };
        return this._get(options);
    }

    // Client Email methods
    async listClientEmails(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmails,
            query: params,
        };
        return this._get(options);
    }

    async getClientEmail(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmailById(id),
        };
        return this._get(options);
    }

    async createClientEmail(data) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmails,
            body: data,
        };
        return this._post(options);
    }

    async updateClientEmail(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmailById(id),
            body: data,
        };
        return this._put(options);
    }

    async patchClientEmail(id, data) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmailById(id),
            body: data,
        };
        return this._patch(options);
    }

    async deleteClientEmail(id) {
        const options = {
            url: this.baseUrl + this.URLs.clientEmailById(id),
        };
        return this._delete(options);
    }

    // Utility methods
    async abnLookup(query) {
        const options = {
            url: this.baseUrl + this.URLs.abnLookup,
            query: { q: query },
        };
        return this._get(options);
    }

    async listAddresses(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.addresses,
            query: params,
        };
        return this._get(options);
    }

    async createAddress(data) {
        const options = {
            url: this.baseUrl + this.URLs.addresses,
            body: data,
        };
        return this._post(options);
    }

    async searchAddresses(searchTerm, limit = 10) {
        const options = {
            url: this.baseUrl + this.URLs.addressSearch,
            query: { search: searchTerm, limit },
        };
        return this._get(options);
    }

    // Authentication methods
    async requestEmailLogin(email) {
        const options = {
            url: this.baseUrl + this.URLs.authLoginEmail,
            body: { email },
            headers: {
                'User-Agent': 'test',
                'accept': 'application/json',
                'content-type': 'application/json',
            },
        };
        return this._post(options);
    }

    async verifyOtp(email, code) {
        const options = {
            url: this.baseUrl + this.URLs.authLoginOtp,
            body: { email, code },
            headers: {
                'User-Agent': 'test',
                'accept': 'application/json',
                'content-type': 'application/json',
            },
        };
        return this._post(options);
    }
}

module.exports = { Api };
