const { OAuth2Requester } = require('@friggframework/core');

/**
 * BGL SimpleFund360 API Client
 * For SMSF (Self-Managed Super Fund) client types
 * Shares OAuth token with CAS360
 */
class Api extends OAuth2Requester {
    constructor(params) {
        super(params);

        this.baseUrl = 'https://api.staging.bgl360.com.au';

        const clientId = process.env.BGL_CLIENT_ID || '***REMOVED***';
        const redirectUri = encodeURIComponent(`${process.env.REDIRECT_URI}/bgl/callback`);

        this.authorizationUri = `https://integrations.staging.bgl360.com.au/u/oauth/authorize?response_type=code&client_id=${clientId}&scope=developer&redirect_uri=${redirectUri}`;
        this.tokenUri = 'https://api.staging.bgl360.com.au/oauth/token';

        this.URLs = {
            // User/Account
            currentUser: '/user/me',

            // SMSFs (Self-Managed Super Funds)
            smsfunds: '/smsfunds',
            smsfundById: (smsfundId) => `/smsfunds/${smsfundId}`,

            // Members
            members: (smsfundId) => `/smsfunds/${smsfundId}/members`,
            memberById: (smsfundId, memberId) => `/smsfunds/${smsfundId}/members/${memberId}`,

            // Trustees
            trustees: (smsfundId) => `/smsfunds/${smsfundId}/trustees`,
            trusteeById: (smsfundId, trusteeId) => `/smsfunds/${smsfundId}/trustees/${trusteeId}`,

            // Contacts
            contacts: '/contacts',
            contactById: (contactId) => `/contacts/${contactId}`,

            // Addresses
            addresses: (smsfundId) => `/smsfunds/${smsfundId}/addresses`,

            // Contributions
            contributions: (smsfundId) => `/smsfunds/${smsfundId}/contributions`,
            contributionById: (smsfundId, contributionId) => `/smsfunds/${smsfundId}/contributions/${contributionId}`,

            // Pensions
            pensions: (smsfundId) => `/smsfunds/${smsfundId}/pensions`,
            pensionById: (smsfundId, pensionId) => `/smsfunds/${smsfundId}/pensions/${pensionId}`,
        };
    }

    /**
     * Get current user details
     */
    async getCurrentUser() {
        const options = {
            url: this.baseUrl + this.URLs.currentUser,
        };
        return this._get(options);
    }

    // ==================== SMSFs ====================

    /**
     * List all SMSFs
     * @param {Object} params - Query parameters
     */
    async listSMSFs(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.smsfunds,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get SMSF by ID
     * @param {string} smsfundId - SMSF ID
     */
    async getSMSF(smsfundId) {
        const options = {
            url: this.baseUrl + this.URLs.smsfundById(smsfundId),
        };
        return this._get(options);
    }

    /**
     * Create a new SMSF
     * @param {Object} params
     * @param {string} params.name - Fund name
     * @param {string} params.abn - Australian Business Number
     * @param {string} params.tfn - Tax File Number
     */
    async createSMSF(params) {
        const options = {
            url: this.baseUrl + this.URLs.smsfunds,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update an SMSF
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Fields to update
     */
    async updateSMSF(smsfundId, params) {
        const options = {
            url: this.baseUrl + this.URLs.smsfundById(smsfundId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    /**
     * Delete an SMSF
     * @param {string} smsfundId - SMSF ID
     */
    async deleteSMSF(smsfundId) {
        const options = {
            url: this.baseUrl + this.URLs.smsfundById(smsfundId),
        };
        return this._delete(options);
    }

    // ==================== Members ====================

    /**
     * List all members of an SMSF
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Query parameters
     */
    async listMembers(smsfundId, params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.members(smsfundId),
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get member by ID
     * @param {string} smsfundId - SMSF ID
     * @param {string} memberId - Member ID
     */
    async getMember(smsfundId, memberId) {
        const options = {
            url: this.baseUrl + this.URLs.memberById(smsfundId, memberId),
        };
        return this._get(options);
    }

    /**
     * Create a new member
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params
     * @param {string} params.firstName - First name
     * @param {string} params.lastName - Last name
     * @param {string} params.tfn - Tax File Number
     */
    async createMember(smsfundId, params) {
        const options = {
            url: this.baseUrl + this.URLs.members(smsfundId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a member
     * @param {string} smsfundId - SMSF ID
     * @param {string} memberId - Member ID
     * @param {Object} params - Fields to update
     */
    async updateMember(smsfundId, memberId, params) {
        const options = {
            url: this.baseUrl + this.URLs.memberById(smsfundId, memberId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Trustees ====================

    /**
     * List all trustees of an SMSF
     * @param {string} smsfundId - SMSF ID
     */
    async listTrustees(smsfundId) {
        const options = {
            url: this.baseUrl + this.URLs.trustees(smsfundId),
        };
        return this._get(options);
    }

    /**
     * Add trustee to SMSF
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Trustee details
     */
    async addTrustee(smsfundId, params) {
        const options = {
            url: this.baseUrl + this.URLs.trustees(smsfundId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    // ==================== Contacts ====================

    /**
     * List all contacts
     * @param {Object} params - Query parameters
     */
    async listContacts(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get contact by ID
     * @param {string} contactId - Contact ID
     */
    async getContact(contactId) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
        };
        return this._get(options);
    }

    /**
     * Create a new contact
     * @param {Object} params
     * @param {string} params.firstName - First name
     * @param {string} params.lastName - Last name
     * @param {string} params.email - Email address
     */
    async createContact(params) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a contact
     * @param {string} contactId - Contact ID
     * @param {Object} params - Fields to update
     */
    async updateContact(contactId, params) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Contributions ====================

    /**
     * List contributions for an SMSF
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Query parameters
     */
    async listContributions(smsfundId, params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.contributions(smsfundId),
            query: params,
        };
        return this._get(options);
    }

    /**
     * Create a new contribution
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Contribution details
     */
    async createContribution(smsfundId, params) {
        const options = {
            url: this.baseUrl + this.URLs.contributions(smsfundId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    // ==================== Pensions ====================

    /**
     * List pensions for an SMSF
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Query parameters
     */
    async listPensions(smsfundId, params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.pensions(smsfundId),
            query: params,
        };
        return this._get(options);
    }

    /**
     * Create a new pension
     * @param {string} smsfundId - SMSF ID
     * @param {Object} params - Pension details
     */
    async createPension(smsfundId, params) {
        const options = {
            url: this.baseUrl + this.URLs.pensions(smsfundId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    // ==================== Sync Operations ====================

    /**
     * Sync SMSF from Nagaris to SimpleFund360
     * @param {Object} smsfData
     * @param {string} smsfData.name - Fund name
     * @param {string} smsfData.abn - ABN
     * @param {string} smsfData.tfn - TFN
     * @param {Array} smsfData.members - Array of members
     * @param {Array} smsfData.trustees - Array of trustees
     */
    async syncSMSF(smsfData) {
        const { name, abn, tfn, members, trustees, ...additionalData } = smsfData;

        // Check if SMSF exists by ABN
        let existingSMSF = null;
        if (abn) {
            const smsfunds = await this.listSMSFs({ abn });
            if (smsfunds && smsfunds.length > 0) {
                existingSMSF = smsfunds[0];
            }
        }

        const smsfParams = {
            name,
            abn,
            tfn,
            ...additionalData,
        };

        let smsf;
        if (existingSMSF) {
            // Update existing SMSF
            smsf = await this.updateSMSF(existingSMSF.id, smsfParams);
        } else {
            // Create new SMSF
            smsf = await this.createSMSF(smsfParams);
        }

        // Sync members if provided
        if (members && members.length > 0) {
            for (const member of members) {
                try {
                    await this.createMember(smsf.id, member);
                } catch (error) {
                    console.error('Error adding member:', error);
                }
            }
        }

        // Sync trustees if provided
        if (trustees && trustees.length > 0) {
            for (const trustee of trustees) {
                try {
                    await this.addTrustee(smsf.id, trustee);
                } catch (error) {
                    console.error('Error adding trustee:', error);
                }
            }
        }

        return smsf;
    }
}

module.exports = { Api };
