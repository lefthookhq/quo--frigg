const { OAuth2Requester } = require('@friggframework/core');

/**
 * Monday.com API Client
 * Uses GraphQL for all operations
 */
class Api extends OAuth2Requester {
    constructor(params) {
        super(params);

        this.baseUrl = 'https://api.monday.com/v2';
        this.authorizationUri = encodeURI(
            `https://auth.monday.com/oauth2/authorize?client_id=${process.env.MONDAY_CLIENT_ID}&response_type=code&scope=${process.env.MONDAY_SCOPES || 'boards:read boards:write'}&redirect_uri=${process.env.REDIRECT_URI}/monday`
        );
        this.tokenUri = 'https://auth.monday.com/oauth2/token';

        this.URLs = {
            graphql: '/graphql',
        };
    }

    /**
     * Execute a GraphQL query
     * @param {string} query - GraphQL query or mutation
     * @param {Object} variables - Optional variables for the query
     */
    async graphql(query, variables = {}) {
        const options = {
            url: this.baseUrl,
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                query,
                variables,
            },
        };

        const response = await this._post(options);

        if (response.errors) {
            throw new Error(`Monday.com GraphQL error: ${JSON.stringify(response.errors)}`);
        }

        return response;
    }

    /**
     * Get account details
     */
    async getAccount() {
        const query = '{account {id, name}}';
        return this.graphql(query);
    }

    /**
     * Get all boards
     * @param {Object} params - Optional parameters
     * @param {number} params.limit - Limit number of boards returned
     */
    async getBoards(params = {}) {
        const limit = params.limit ? `(limit: ${params.limit})` : '';
        const query = `{boards ${limit} {id, name, description, state, board_kind}}`;
        return this.graphql(query);
    }

    /**
     * Get board by ID with items
     * @param {string} boardId - Board ID
     */
    async getBoard(boardId) {
        const query = `{boards (ids: ${boardId}) {
            id, name, description, state, board_kind,
            columns {id, title, type},
            items {id, name, state}
        }}`;
        return this.graphql(query);
    }

    /**
     * Get board columns
     * @param {string} boardId - Board ID
     */
    async getBoardColumns(boardId) {
        const query = `{boards (ids: ${boardId}) {columns {id, title, type}}}`;
        const response = await this.graphql(query);
        return response.data.boards[0].columns;
    }

    /**
     * Get board items (tasks)
     * @param {string} boardId - Board ID
     * @param {Object} params - Optional parameters
     */
    async getBoardItems(boardId, params = {}) {
        const limit = params.limit ? `, limit: ${params.limit}` : '';
        const query = `{boards (ids: ${boardId}) {
            items (${limit ? limit.slice(2) : ''}) {
                id, name, state,
                column_values {id, title, text, value}
            }
        }}`;
        const response = await this.graphql(query);
        return response.data.boards[0].items;
    }

    /**
     * Create a new board
     * @param {Object} params
     * @param {string} params.name - Board name
     * @param {string} params.kind - Board kind (public, private, share)
     */
    async createBoard({ name, kind = 'public' }) {
        const query = `mutation ($boardName: String!, $boardKind: BoardKind!) {
            create_board (board_name: $boardName, board_kind: $boardKind) {
                id, name
            }
        }`;
        const variables = {
            boardName: name,
            boardKind: kind,
        };
        const response = await this.graphql(query, variables);
        return response.data.create_board;
    }

    /**
     * Create a new column
     * @param {Object} params
     * @param {string} params.boardId - Board ID
     * @param {string} params.title - Column title
     * @param {string} params.type - Column type (text, status, etc.)
     */
    async createColumn({ boardId, title, type }) {
        const query = `mutation {
            create_column (board_id: ${boardId}, title: ${JSON.stringify(title)}, column_type: ${type}) {
                id, title
            }
        }`;
        const response = await this.graphql(query);
        return response.data.create_column;
    }

    /**
     * Create a new item (task)
     * @param {Object} params
     * @param {string} params.boardId - Board ID
     * @param {string} params.itemName - Item name
     * @param {Object} params.columnValues - Column values as object (title -> value)
     */
    async createItem({ boardId, itemName, columnValues = {} }) {
        // Get board columns to map titles to IDs
        const columns = await this.getBoardColumns(boardId);

        const mappedValues = {};
        Object.keys(columnValues).forEach((title) => {
            const column = columns.find((col) => col.title === title);
            if (column) {
                mappedValues[column.id] = columnValues[title];
            }
        });

        const query = `mutation {
            create_item (
                board_id: ${boardId},
                item_name: ${JSON.stringify(itemName)},
                column_values: ${JSON.stringify(JSON.stringify(mappedValues))}
            ) {
                id, name
            }
        }`;
        const response = await this.graphql(query);
        return response.data.create_item;
    }

    /**
     * Update an item
     * @param {Object} params
     * @param {string} params.boardId - Board ID
     * @param {string} params.itemId - Item ID
     * @param {Object} params.columnValues - Column values to update (title -> value)
     */
    async updateItem({ boardId, itemId, columnValues = {} }) {
        // Get board columns to map titles to IDs
        const columns = await this.getBoardColumns(boardId);

        const mappedValues = {};
        Object.keys(columnValues).forEach((title) => {
            const column = columns.find((col) => col.title === title);
            if (column) {
                mappedValues[column.id] = columnValues[title];
            }
        });

        const query = `mutation {
            change_multiple_column_values (
                board_id: ${boardId},
                item_id: ${itemId},
                column_values: ${JSON.stringify(JSON.stringify(mappedValues))}
            ) {
                id
            }
        }`;
        const response = await this.graphql(query);
        return response.data.change_multiple_column_values;
    }

    /**
     * Update item name
     * @param {string} itemId - Item ID
     * @param {string} name - New item name
     */
    async updateItemName(itemId, name) {
        const query = `mutation {
            change_simple_column_value (
                item_id: ${itemId},
                column_id: "name",
                value: ${JSON.stringify(name)}
            ) {
                id
            }
        }`;
        return this.graphql(query);
    }

    /**
     * Delete an item
     * @param {string} itemId - Item ID
     */
    async deleteItem(itemId) {
        const query = `mutation {
            delete_item (item_id: ${itemId}) {
                id
            }
        }`;
        const response = await this.graphql(query);
        return response.data.delete_item;
    }

    /**
     * Get item by ID
     * @param {string} itemId - Item ID
     */
    async getItem(itemId) {
        const query = `{items (ids: ${itemId}) {
            id, name, state, board {id, name},
            column_values {id, title, text, value}
        }}`;
        const response = await this.graphql(query);
        return response.data.items[0];
    }

    /**
     * Link a Nagaris service to a Monday item
     * @param {Object} params
     * @param {string} params.itemId - Monday item ID
     * @param {string} params.serviceId - Nagaris service ID
     * @param {string} params.serviceType - Nagaris service type
     * @param {string} params.linkColumnTitle - Column title for the link (default: "Nagaris Link")
     */
    async linkServiceToItem({ itemId, serviceId, serviceType, linkColumnTitle = 'Nagaris Link' }) {
        const item = await this.getItem(itemId);
        const boardId = item.board.id;

        const linkValue = {
            [linkColumnTitle]: `${serviceType}: ${serviceId}`
        };

        return this.updateItem({
            boardId,
            itemId,
            columnValues: linkValue
        });
    }
}

module.exports = { Api };
