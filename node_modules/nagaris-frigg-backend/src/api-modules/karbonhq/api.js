const { Requester } = require('@friggframework/core');

/**
 * KarbonHQ API Client
 * Practice management and workflow tool with dual API key authentication
 */
class Api extends Requester {
    constructor(params) {
        super(params);
        this.baseUrl = 'https://api.karbonhq.com/v3';
        this.applicationId = null;
        this.accessKey = null;

        this.URLs = {
            // Contacts
            contacts: '/Contacts',
            contactById: (contactId) => `/Contacts/${contactId}`,

            // Organizations
            organizations: '/Organizations',
            organizationById: (orgId) => `/Organizations/${orgId}`,

            // Client Groups
            clientGroups: '/ClientGroups',
            clientGroupById: (groupId) => `/ClientGroups/${groupId}`,

            // Work Items
            workItems: '/WorkItems',
            workItemById: (workItemId) => `/WorkItems/${workItemId}`,

            // Users
            users: '/Users',
            userById: (userId) => `/Users/${userId}`,
        };
    }

    /**
     * Set credentials for dual API key authentication
     */
    async setCredential(credential) {
        this.credential = credential;

        if (credential.applicationId && credential.accessKey) {
            this.applicationId = credential.applicationId;
            this.accessKey = credential.accessKey;
        }
    }

    /**
     * Add auth headers for KarbonHQ (Authorization with Bearer token + AccessKey)
     */
    async addAuthHeaders(headers) {
        if (this.applicationId && this.accessKey) {
            headers['Authorization'] = `Bearer ${this.applicationId}`;
            headers['AccessKey'] = this.accessKey;
        }
        headers['Content-Type'] = 'application/json';
        return headers;
    }

    // ==================== Contacts ====================

    /**
     * List contacts
     * @param {Object} params - Query parameters
     * @param {number} params.limit - Limit results
     * @param {string} params.contactType - Filter by contact type
     */
    async listContacts(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get contact by ID
     * @param {string} contactId - Contact ID
     */
    async getContact(contactId) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
        };
        return this._get(options);
    }

    /**
     * Create a new contact
     * @param {Object} params
     * @param {string} params.FullName - Contact full name
     * @param {string} params.EmailAddress - Email address
     * @param {string} params.ContactType - Contact type (Person, Organization)
     */
    async createContact(params) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a contact
     * @param {string} contactId - Contact ID
     * @param {Object} params - Fields to update
     */
    async updateContact(contactId, params) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Organizations ====================

    /**
     * List organizations
     * @param {Object} params - Query parameters
     */
    async listOrganizations(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.organizations,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get organization by ID
     * @param {string} orgId - Organization ID
     */
    async getOrganization(orgId) {
        const options = {
            url: this.baseUrl + this.URLs.organizationById(orgId),
        };
        return this._get(options);
    }

    /**
     * Create a new organization
     * @param {Object} params
     * @param {string} params.LegalName - Organization legal name
     */
    async createOrganization(params) {
        const options = {
            url: this.baseUrl + this.URLs.organizations,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update an organization
     * @param {string} orgId - Organization ID
     * @param {Object} params - Fields to update
     */
    async updateOrganization(orgId, params) {
        const options = {
            url: this.baseUrl + this.URLs.organizationById(orgId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Client Groups ====================

    /**
     * List client groups
     * @param {Object} params - Query parameters
     */
    async listClientGroups(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.clientGroups,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get client group by ID
     * @param {string} groupId - Client group ID
     */
    async getClientGroup(groupId) {
        const options = {
            url: this.baseUrl + this.URLs.clientGroupById(groupId),
        };
        return this._get(options);
    }

    /**
     * Create a new client group
     * @param {Object} params
     * @param {string} params.Name - Client group name
     */
    async createClientGroup(params) {
        const options = {
            url: this.baseUrl + this.URLs.clientGroups,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a client group
     * @param {string} groupId - Client group ID
     * @param {Object} params - Fields to update
     */
    async updateClientGroup(groupId, params) {
        const options = {
            url: this.baseUrl + this.URLs.clientGroupById(groupId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Work Items ====================

    /**
     * List work items
     * @param {Object} params - Query parameters
     */
    async listWorkItems(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.workItems,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get work item by ID
     * @param {string} workItemId - Work item ID
     */
    async getWorkItem(workItemId) {
        const options = {
            url: this.baseUrl + this.URLs.workItemById(workItemId),
        };
        return this._get(options);
    }

    /**
     * Create a new work item
     * @param {Object} params
     * @param {string} params.Title - Work item title
     * @param {string} params.WorkType - Work type
     */
    async createWorkItem(params) {
        const options = {
            url: this.baseUrl + this.URLs.workItems,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a work item
     * @param {string} workItemId - Work item ID
     * @param {Object} params - Fields to update
     */
    async updateWorkItem(workItemId, params) {
        const options = {
            url: this.baseUrl + this.URLs.workItemById(workItemId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Sync Operations ====================

    /**
     * Sync client data from Nagaris to KarbonHQ
     * Creates or updates a contact and organization
     * @param {Object} clientData
     * @param {string} clientData.name - Client name
     * @param {string} clientData.email - Client email
     * @param {string} clientData.organizationName - Organization name
     * @param {Object} clientData.additionalData - Additional fields
     */
    async syncClient(clientData) {
        const { name, email, organizationName, additionalData = {} } = clientData;

        // Create or update contact
        const contactParams = {
            FullName: name,
            EmailAddress: email,
            ContactType: 'Person',
            ...additionalData.contact,
        };

        let contact;
        try {
            // Try to find existing contact by email
            const contacts = await this.listContacts({ EmailAddress: email });
            if (contacts.length > 0) {
                // Update existing
                contact = await this.updateContact(contacts[0].ContactKey, contactParams);
            } else {
                // Create new
                contact = await this.createContact(contactParams);
            }
        } catch (error) {
            console.error('Error syncing contact:', error);
            throw error;
        }

        // Create or update organization if provided
        let organization = null;
        if (organizationName) {
            const orgParams = {
                LegalName: organizationName,
                ...additionalData.organization,
            };

            try {
                const orgs = await this.listOrganizations({ LegalName: organizationName });
                if (orgs.length > 0) {
                    organization = await this.updateOrganization(orgs[0].OrganizationKey, orgParams);
                } else {
                    organization = await this.createOrganization(orgParams);
                }
            } catch (error) {
                console.error('Error syncing organization:', error);
            }
        }

        return {
            contact,
            organization,
        };
    }

    /**
     * Sync entity data (organization) from Nagaris to KarbonHQ
     * @param {Object} entityData
     * @param {string} entityData.name - Entity name
     * @param {Object} entityData.additionalData - Additional fields
     */
    async syncEntity(entityData) {
        const { name, additionalData = {} } = entityData;

        const orgParams = {
            LegalName: name,
            ...additionalData,
        };

        try {
            const orgs = await this.listOrganizations({ LegalName: name });
            if (orgs.length > 0) {
                return await this.updateOrganization(orgs[0].OrganizationKey, orgParams);
            } else {
                return await this.createOrganization(orgParams);
            }
        } catch (error) {
            console.error('Error syncing entity:', error);
            throw error;
        }
    }
}

module.exports = { Api };
