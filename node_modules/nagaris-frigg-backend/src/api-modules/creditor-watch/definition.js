require('dotenv').config();
const { Api } = require('./api');
const config = require('./defaultConfig.json');

const Definition = {
    API: Api,
    getName: function () {
        return config.name;
    },
    moduleName: config.name,
    modelName: 'creditorwatch',

    requiredAuthMethods: {
        getAuthorizationRequirements: async (api, params) => {
            return api.getAuthorizationRequirements();
        },
        // Process credentials from environment variables
        getToken: async function (api) {
            // Get credentials from environment
            const username = process.env.CREDITORWATCH_USERNAME;
            const password = process.env.CREDITORWATCH_PASSWORD;

            // Set credentials on API instance
            api.username = username;
            api.password = password;

            // Exchange credentials for JWT tokens
            const tokenResponse = await api.getTokenFromUsernamePassword();

            // Return tokens as "token" response
            return {
                access_token: tokenResponse.token,
                refresh_token: tokenResponse.refresh_token,
                username: username,
            };
        },

        getEntityDetails: async function (
            api,
            callbackParams,
            tokenResponse,
            userId,
        ) {
            const userDetails = await api.getUserDetails();

            // Use user ID as external identifier
            const externalId =
                userDetails.id || userDetails.userId || userDetails.email;
            const name =
                userDetails.name ||
                userDetails.username ||
                userDetails.email ||
                'Creditor Watch User';

            return {
                identifiers: {
                    externalId: externalId,
                    user: userId,
                },
                details: {
                    name: name,
                    email: userDetails.email,
                    company: userDetails.company || userDetails.organisation,
                },
            };
        },

        // Persist JWT tokens and username
        apiPropertiesToPersist: {
            credential: ['access_token', 'refresh_token', 'username'],
            entity: [],
        },

        getCredentialDetails: async function (api, userId) {
            const userDetails = await api.getUserDetails();

            const externalId =
                userDetails.id ||
                userDetails.userId ||
                userDetails.email ||
                api.username;

            return {
                identifiers: {
                    externalId: externalId,
                    user: userId,
                },
                details: {},
            };
        },

        testAuthRequest: async function (api) {
            return api.getUserDetails();
        },
    },

    // No OAuth2 environment variables needed for API key auth
    env: {
        // Can include any service-specific config if needed
        // redirect_uri: `${process.env.REDIRECT_URI}/creditor-watch`,
    },
};

module.exports = { Definition };
