const { OAuth2Requester, get } = require('@friggframework/core');

class Api extends OAuth2Requester {
    constructor(params) {
        super(params);

        // Username/password configuration for authentication
        this.username = get(params, 'username', null);
        this.password = get(params, 'password', null);

        // JWT token configuration
        this.access_token = get(params, 'access_token', null);
        this.refresh_token = get(params, 'refresh_token', null);

        // CreditorWatch API base URL
        this.baseUrl = 'https://api.creditorwatch.com.au';

        // API endpoints based on official CreditorWatch API specification
        this.URLs = {
            // Authentication
            login: '/login',

            // Credit Assessment & Reports
            creditScore: '/credit-score',
            creditReport: '/credit-report', 
            customProfile: '/custom-profile',
            purchaseExtract: '/purchase-extract',

            // Monitoring & Watchlist
            addToWatchlist: '/add-to-watchlist',
            removeFromWatchlist: '/remove-from-watchlist',
            onWatchlist: '/on-watchlist',

            // Identity Verification (KYC)
            verifyDriversLicence: '/kyc/verification/dvs/drivers-licence',
            verifyPassport: '/kyc/verification/dvs/passport',
            verifyMedicare: '/kyc/verification/dvs/medicare',

            // ASIC Data
            asicDocuments: (acn) => `/asic/company/${acn}/documents`,

            // Director & Shareholder Lookup
            companySearch: '/company-search',
            businessProfileSummary: (organisationNumber) => `/business-profile/summary/${organisationNumber}`,
            creditReportSummary: (orgId) => `/credit-report/summary/${orgId}`,

            // UBO (Ultimate Beneficial Owner) Reports
            uboReport: '/kyc/ubo/report',
            uboReportById: (id) => `/kyc/ubo/report/${id}`,
            uboReportDownload: (id) => `/kyc/ubo/report/${id}/download`,

            // AML (Anti-Money Laundering) Reports  
            amlReport: '/kyc/aml/report',
            amlReportById: (id) => `/kyc/aml/report/${id}`,
        };
    }

    // Authentication: Login with username/password to get JWT token
    async getTokenFromUsernamePassword() {
        try {
            const loginData = {
                username: this.username,
                password: this.password,
            };

            const options = {
                url: this.baseUrl + this.URLs.login,
                body: loginData,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'FriggFramework/1.0',
                    accept: 'application/json',
                },
            };

            const response = await this._post(options);

            // Extract tokens from response
            if (response.token && response.refresh_token) {
                await this.setTokens({
                    access_token: response.token,
                    refresh_token: response.refresh_token,
                });
            }

            return response;
        } catch (err) {
            await this.notify(this.DLGT_INVALID_AUTH);
            throw err;
        }
    }

    // Add Bearer token authentication to request headers
    addAuthHeaders(headers = {}) {
        const newHeaders = { ...headers };

        if (this.access_token) {
            newHeaders['Authorization'] = `Bearer ${this.access_token}`;
        }

        return newHeaders;
    }

    // Override HTTP methods to include authentication headers
    async _get(options) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._get(options);
    }

    async _post(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._post(options, stringify);
    }

    async _put(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._put(options, stringify);
    }

    async _patch(options, stringify) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._patch(options, stringify);
    }

    async _delete(options) {
        options.headers = this.addAuthHeaders(options.headers);
        return super._delete(options);
    }

    // Required method for Frigg integration - placeholder since CreditorWatch doesn't have user profile endpoint
    async getUserDetails() {
        // CreditorWatch API doesn't have a user profile endpoint
        // Return a basic user object based on successful authentication
        if (!this.access_token) {
            throw new Error('Authentication required - no access token available');
        }
        
        return {
            authenticated: true,
            username: this.username,
            token_expires: this.refresh_token ? 'Refreshable' : 'Unknown',
        };
    }

    // Credit Assessment APIs
    
    /**
     * Purchase a Credit Score for a company
     * @param {Object} params - Query parameters
     * @param {string} params.acn - Australian Company Number
     * @param {string} params.abn - Australian Business Number  
     * @param {boolean} [params.include_payment_predictor] - Include payment predictor data
     * @param {string} [params.credit_rating] - Include credit rating and 12 month history
     * @returns {Promise<Object>} Credit score data
     */
    async getCreditScore(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.creditScore,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Purchase a Credit Report Extract  
     * @param {Object} params - Query parameters
     * @param {string} params.acn - Australian Company Number
     * @param {string} params.abn - Australian Business Number
     * @param {string} [params.lenders] - Show lenders loan information (true/false)
     * @param {string} [params['ato-tax-default']] - Show ATO Tax Default information (true/false)
     * @param {string} [params.anzsic] - Show ANZSIC information (true/false)
     * @returns {Promise<Object>} Credit report data
     */
    async getCreditReport(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.creditReport,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Purchase a Custom Credit Report with configurable sections
     * @param {Object} params - Query parameters
     * @param {string} params.acn - Australian Company Number
     * @param {string} params.abn - Australian Business Number
     * @param {string} [params.credit_report] - Include credit report and adverse data
     * @param {string} [params.credit_score] - Include credit score and 12 months history
     * @param {string} [params.credit_rating] - Include credit rating and 12 months history
     * @param {string} [params.payment_predictor] - Include payment predictor stats
     * @param {string} [params.payment_rating] - Include payment rating and 12 months history
     * @param {string} [params.asic_extract_type] - ASIC extract type (no-extract, onfile, current, historical)
     * @param {string} [params.ppsr_search] - Include PPSR search
     * @param {string} [params.comprehensive_report] - Full comprehensive report
     * @param {string} [params.pdf] - Generate PDF output
     * @param {string} [params.lenders] - Show lenders loan information
     * @param {string} [params['ato-tax-default']] - Show ATO Tax Default information
     * @param {string} [params.anzsic] - Show ANZSIC information
     * @returns {Promise<Object>} Custom credit profile data
     */
    async getCustomProfile(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.customProfile,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Purchase an ASIC Extract
     * @param {Object} params - Query parameters
     * @param {string} params.acn - Australian Company Number (required)
     * @param {boolean} [params.allow_historical] - Allow historical extract if company is deregistered
     * @param {string} [params.type] - Extract type (current or historical)
     * @param {string} [params.pdf] - Generate PDF output
     * @returns {Promise<Object>} ASIC extract data
     */
    async purchaseExtract(params = {}) {
        if (!params.acn) {
            throw new Error('ACN (Australian Company Number) is required for ASIC extract');
        }

        const options = {
            url: this.baseUrl + this.URLs.purchaseExtract,
            query: params,
        };
        return this._get(options);
    }

    // Monitoring & Watchlist APIs

    /**
     * Add a company to the customer monitoring watchlist
     * @param {Object} data - Request body
     * @param {string} [data.acn] - Australian Company Number
     * @param {string} [data.abn] - Australian Business Number
     * @param {string} [data.customAccountId] - Unique identifier for customer system
     * @returns {Promise<Object>} Watchlist addition result
     */
    async addToWatchlist(data = {}) {
        if (!data.acn && !data.abn) {
            throw new Error('Either ACN or ABN is required to add to watchlist');
        }

        const options = {
            url: this.baseUrl + this.URLs.addToWatchlist,
            body: data,
        };
        return this._post(options);
    }

    /**
     * Remove a company from the customer monitoring watchlist
     * @param {Object} data - Request body
     * @param {string} [data.acn] - Australian Company Number
     * @param {string} [data.abn] - Australian Business Number
     * @returns {Promise<Object>} Watchlist removal result
     */
    async removeFromWatchlist(data = {}) {
        if (!data.acn && !data.abn) {
            throw new Error('Either ACN or ABN is required to remove from watchlist');
        }

        const options = {
            url: this.baseUrl + this.URLs.removeFromWatchlist,
            body: data,
        };
        return this._delete(options);
    }

    /**
     * Check if a company is on the customer monitoring watchlist
     * @param {Object} params - Query parameters
     * @param {string} [params.acn] - Australian Company Number
     * @param {string} [params.abn] - Australian Business Number
     * @returns {Promise<Object>} Watchlist status
     */
    async checkWatchlistStatus(params = {}) {
        if (!params.acn && !params.abn) {
            throw new Error('Either ACN or ABN is required to check watchlist status');
        }

        const options = {
            url: this.baseUrl + this.URLs.onWatchlist,
            query: params,
        };
        return this._get(options);
    }

    // Identity Verification (KYC) APIs

    /**
     * Verify driver's licence details
     * @param {Object} data - Driver licence data
     * @param {string} data.birthDate - Birth date
     * @param {string} data.givenName - Given name
     * @param {string} [data.middleName] - Middle name
     * @param {string} data.familyName - Family name
     * @param {string} data.licenceNumber - Licence number
     * @param {string} data.stateOfIssue - State of issue (NSW, QLD, SA, TAS, VIC, WA, ACT, NT)
     * @param {string} [data.expiryDate] - Expiry date
     * @param {string} data.oac - Originating Agency Code
     * @param {string} [data.cardNumber] - Licence card number
     * @returns {Promise<Object>} Verification result
     */
    async verifyDriversLicence(data = {}) {
        const requiredFields = ['birthDate', 'familyName', 'givenName', 'licenceNumber', 'oac', 'stateOfIssue'];
        const missingFields = requiredFields.filter(field => !data[field]);
        
        if (missingFields.length > 0) {
            throw new Error(`Missing required fields for driver's licence verification: ${missingFields.join(', ')}`);
        }

        const validStates = ['NSW', 'QLD', 'SA', 'TAS', 'VIC', 'WA', 'ACT', 'NT'];
        if (!validStates.includes(data.stateOfIssue)) {
            throw new Error(`Invalid state of issue. Must be one of: ${validStates.join(', ')}`);
        }

        const options = {
            url: this.baseUrl + this.URLs.verifyDriversLicence,
            body: data,
        };
        return this._post(options);
    }

    /**
     * Verify passport details  
     * @param {Object} data - Passport data
     * @param {string} data.birthDate - Birth date
     * @param {string} data.givenName - Given name
     * @param {string} data.familyName - Family name
     * @param {string} data.travelDocumentNumber - Passport number
     * @param {string} data.gender - Gender
     * @param {string} [data.expiryDate] - Expiry date
     * @param {string} data.oac - Originating Agency Code
     * @returns {Promise<Object>} Verification result
     */
    async verifyPassport(data = {}) {
        const requiredFields = ['birthDate', 'familyName', 'gender', 'givenName', 'oac', 'travelDocumentNumber'];
        const missingFields = requiredFields.filter(field => !data[field]);
        
        if (missingFields.length > 0) {
            throw new Error(`Missing required fields for passport verification: ${missingFields.join(', ')}`);
        }

        const options = {
            url: this.baseUrl + this.URLs.verifyPassport,
            body: data,
        };
        return this._post(options);
    }

    /**
     * Verify Medicare details
     * @param {Object} data - Medicare data
     * @param {string} data.birthDate - Birth date (format: DD-MM-YYYY)
     * @param {string} data.cardExpiry - Card expiry date (format: DD-MM-YYYY)
     * @param {string} data.cardNumber - Medicare card number (minimum 10 characters)
     * @param {string} data.cardType - Card type (maximum 40 characters)
     * @param {string} data.individualReferenceNumber - IRN position on Medicare card (1 character)
     * @param {string} [data.fullName1] - First name on card
     * @param {string} [data.fullName2] - Second name on card
     * @param {string} [data.fullName3] - Third name on card
     * @param {string} [data.fullName4] - Fourth name on card
     * @param {string} [data.expiryDate] - Alternative expiry date field
     * @returns {Promise<Object>} Verification result
     */
    async verifyMedicare(data = {}) {
        const requiredFields = ['birthDate', 'cardExpiry', 'cardNumber', 'cardType', 'individualReferenceNumber'];
        const missingFields = requiredFields.filter(field => !data[field]);
        
        if (missingFields.length > 0) {
            throw new Error(`Missing required fields for Medicare verification: ${missingFields.join(', ')}`);
        }

        // Validate field lengths and formats
        if (data.cardNumber && data.cardNumber.length < 10) {
            throw new Error('Medicare card number must be at least 10 characters');
        }

        if (data.cardType && data.cardType.length > 40) {
            throw new Error('Medicare card type must be maximum 40 characters');
        }

        if (data.individualReferenceNumber && data.individualReferenceNumber.length !== 1) {
            throw new Error('Individual Reference Number must be exactly 1 character');
        }

        const options = {
            url: this.baseUrl + this.URLs.verifyMedicare,
            body: data,
        };
        return this._post(options);
    }

    // ASIC Data APIs

    /**
     * Get ASIC lodged documents since the last onfile extract
     * @param {string} acn - The Australian Company Number (required)
     * @returns {Promise<Object>} ASIC documents data
     */
    async getAsicDocuments(acn) {
        if (!acn) {
            throw new Error('ACN (Australian Company Number) is required to get ASIC documents');
        }

        const options = {
            url: this.baseUrl + this.URLs.asicDocuments(acn),
        };
        return this._get(options);
    }

    // Director & Shareholder Lookup APIs

    /**
     * Search for companies by name, ABN, ACN, or other criteria
     * @param {Object} params - Search parameters
     * @param {string} [params.name] - Company name to search for
     * @param {string} [params.acn] - Australian Company Number
     * @param {string} [params.abn] - Australian Business Number
     * @param {number} [params.limit] - Maximum number of results to return
     * @param {number} [params.offset] - Number of results to skip for pagination
     * @returns {Promise<Object>} Company search results
     */
    async searchCompanies(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.companySearch,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get business profile summary including director information
     * @param {string} organisationNumber - Organisation number (ACN or ABN)
     * @returns {Promise<Object>} Business profile with director information
     */
    async getBusinessProfileSummary(organisationNumber) {
        if (!organisationNumber) {
            throw new Error('Organisation Number is required for business profile summary');
        }

        const options = {
            url: this.baseUrl + this.URLs.businessProfileSummary(organisationNumber),
        };
        return this._get(options);
    }

    /**
     * Get credit report summary with director and company information
     * @param {string} orgId - Organisation ID
     * @returns {Promise<Object>} Credit report summary with director information
     */
    async getCreditReportSummary(orgId) {
        if (!orgId) {
            throw new Error('Organisation ID is required for credit report summary');
        }

        const options = {
            url: this.baseUrl + this.URLs.creditReportSummary(orgId),
        };
        return this._get(options);
    }

    // UBO (Ultimate Beneficial Owner) Reports - For Shareholder Analysis

    /**
     * Generate a UBO (Ultimate Beneficial Owner) report to identify shareholders
     * @param {Object} data - UBO report request data
     * @param {string} data.organisationNumber - Organisation number (ACN or ABN)
     * @param {string} [data.reportType] - Type of UBO report to generate
     * @returns {Promise<Object>} UBO report generation response with report ID
     */
    async generateUboReport(data = {}) {
        if (!data.organisationNumber) {
            throw new Error('Organisation Number is required to generate UBO report');
        }

        const options = {
            url: this.baseUrl + this.URLs.uboReport,
            body: data,
        };
        return this._post(options);
    }

    /**
     * Get UBO report by ID - contains detailed shareholder information
     * @param {string} reportId - UBO report ID
     * @returns {Promise<Object>} UBO report with shareholder details
     */
    async getUboReport(reportId) {
        if (!reportId) {
            throw new Error('Report ID is required to get UBO report');
        }

        const options = {
            url: this.baseUrl + this.URLs.uboReportById(reportId),
        };
        return this._get(options);
    }

    /**
     * Download UBO report as PDF
     * @param {string} reportId - UBO report ID
     * @returns {Promise<Object>} UBO report download response
     */
    async downloadUboReport(reportId) {
        if (!reportId) {
            throw new Error('Report ID is required to download UBO report');
        }

        const options = {
            url: this.baseUrl + this.URLs.uboReportDownload(reportId),
        };
        return this._get(options);
    }

    // AML (Anti-Money Laundering) Reports - For Enhanced Director Checks

    /**
     * Generate AML report for enhanced director and officer screening
     * @param {Object} data - AML report request data
     * @param {string} data.organisationNumber - Organisation number (ACN or ABN)
     * @param {string} [data.reportType] - Type of AML report to generate
     * @returns {Promise<Object>} AML report generation response with report ID
     */
    async generateAmlReport(data = {}) {
        if (!data.organisationNumber) {
            throw new Error('Organisation Number is required to generate AML report');
        }

        const options = {
            url: this.baseUrl + this.URLs.amlReport,
            body: data,
        };
        return this._post(options);
    }

    /**
     * Get AML report by ID - contains enhanced director screening information
     * @param {string} reportId - AML report ID
     * @returns {Promise<Object>} AML report with director screening details
     */
    async getAmlReport(reportId) {
        if (!reportId) {
            throw new Error('Report ID is required to get AML report');
        }

        const options = {
            url: this.baseUrl + this.URLs.amlReportById(reportId),
        };
        return this._get(options);
    }

    // Utility Methods

    /**
     * Validate Australian Company Number (ACN) format
     * @param {string} acn - ACN to validate
     * @returns {boolean} True if ACN format is valid
     */
    static validateACN(acn) {
        if (!acn || typeof acn !== 'string') {
            return false;
        }
        
        // Remove spaces and check if it's 9 digits
        const cleanACN = acn.replace(/\s/g, '');
        return /^\d{9}$/.test(cleanACN);
    }

    /**
     * Validate Australian Business Number (ABN) format
     * @param {string} abn - ABN to validate
     * @returns {boolean} True if ABN format is valid
     */
    static validateABN(abn) {
        if (!abn || typeof abn !== 'string') {
            return false;
        }
        
        // Remove spaces and check if it's 11 digits
        const cleanABN = abn.replace(/\s/g, '');
        return /^\d{11}$/.test(cleanABN);
    }

    /**
     * Format ACN with spaces (XXX XXX XXX)
     * @param {string} acn - ACN to format
     * @returns {string} Formatted ACN or original string if invalid
     */
    static formatACN(acn) {
        if (!acn || typeof acn !== 'string') {
            return acn;
        }
        
        const cleanACN = acn.replace(/\s/g, '');
        if (!/^\d{9}$/.test(cleanACN)) {
            return acn;
        }
        
        return `${cleanACN.substring(0, 3)} ${cleanACN.substring(3, 6)} ${cleanACN.substring(6, 9)}`;
    }

    /**
     * Format ABN with spaces (XX XXX XXX XXX)
     * @param {string} abn - ABN to format
     * @returns {string} Formatted ABN or original string if invalid
     */
    static formatABN(abn) {
        if (!abn || typeof abn !== 'string') {
            return abn;
        }
        
        const cleanABN = abn.replace(/\s/g, '');
        if (!/^\d{11}$/.test(cleanABN)) {
            return abn;
        }
        
        return `${cleanABN.substring(0, 2)} ${cleanABN.substring(2, 5)} ${cleanABN.substring(5, 8)} ${cleanABN.substring(8, 11)}`;
    }

    /**
     * Helper method to validate common required parameters
     * @param {Object} params - Parameters to validate
     * @param {string[]} requiredFields - Array of required field names
     * @throws {Error} If any required fields are missing
     */
    static validateRequiredParams(params, requiredFields) {
        const missingFields = requiredFields.filter(field => !params[field]);
        if (missingFields.length > 0) {
            throw new Error(`Missing required parameters: ${missingFields.join(', ')}`);
        }
    }

    /**
     * Helper method to clean and validate ABN/ACN parameters
     * @param {Object} params - Parameters containing ABN/ACN
     * @returns {Object} Parameters with cleaned ABN/ACN values
     */
    static cleanBusinessNumbers(params) {
        const cleanedParams = { ...params };
        
        if (cleanedParams.acn) {
            cleanedParams.acn = cleanedParams.acn.replace(/\s/g, '');
        }
        
        if (cleanedParams.abn) {
            cleanedParams.abn = cleanedParams.abn.replace(/\s/g, '');
        }
        
        return cleanedParams;
    }

    /**
     * Comprehensive director and shareholder lookup workflow
     * @param {string} organisationNumber - ACN or ABN of the company
     * @param {Object} options - Lookup options
     * @param {boolean} [options.includeUbo] - Generate UBO report for detailed shareholder info
     * @param {boolean} [options.includeAml] - Generate AML report for enhanced director screening
     * @param {boolean} [options.includeBusinessProfile] - Get business profile summary
     * @param {boolean} [options.includeCreditSummary] - Get credit report summary
     * @returns {Promise<Object>} Comprehensive director and shareholder information
     */
    async getDirectorShareholderInfo(organisationNumber, options = {}) {
        if (!organisationNumber) {
            throw new Error('Organisation Number is required for director/shareholder lookup');
        }

        const results = {};
        const promises = [];

        // Business profile for basic director information
        if (options.includeBusinessProfile !== false) {
            promises.push(
                this.getBusinessProfileSummary(organisationNumber)
                    .then(data => { results.businessProfile = data; })
                    .catch(err => { results.businessProfileError = err.message; })
            );
        }

        // Credit report summary for additional director details
        if (options.includeCreditSummary) {
            promises.push(
                this.getCreditReportSummary(organisationNumber)
                    .then(data => { results.creditSummary = data; })
                    .catch(err => { results.creditSummaryError = err.message; })
            );
        }

        // UBO report for detailed shareholder information
        if (options.includeUbo) {
            promises.push(
                this.generateUboReport({ organisationNumber })
                    .then(response => {
                        if (response.reportId) {
                            return this.getUboReport(response.reportId);
                        }
                        throw new Error('UBO report generation failed');
                    })
                    .then(data => { results.uboReport = data; })
                    .catch(err => { results.uboReportError = err.message; })
            );
        }

        // AML report for enhanced director screening
        if (options.includeAml) {
            promises.push(
                this.generateAmlReport({ organisationNumber })
                    .then(response => {
                        if (response.reportId) {
                            return this.getAmlReport(response.reportId);
                        }
                        throw new Error('AML report generation failed');
                    })
                    .then(data => { results.amlReport = data; })
                    .catch(err => { results.amlReportError = err.message; })
            );
        }

        // Wait for all requests to complete
        await Promise.allSettled(promises);

        return {
            organisationNumber,
            ...results,
            retrievedAt: new Date().toISOString(),
        };
    }
}

module.exports = { Api };
