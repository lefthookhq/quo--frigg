const { OAuth2Requester } = require('@friggframework/core');

/**
 * SuiteFiles API Client
 * Modified OAuth2 flow where token is returned directly in redirect URL
 */
class Api extends OAuth2Requester {
    constructor(params) {
        super(params);
        this.baseUrl = 'https://api.suitefiles.com';
        this.appKey = params.appKey || process.env.SUITEFILES_APP_KEY;

        this.URLs = {
            userDetails: '/api/user',
            folders: '/api/folders',
            folderById: (folderId) => `/api/folders/${folderId}`,
            folderContents: (folderId) => `/api/folders/${folderId}/contents`,
            createFolder: '/api/folders',
            files: '/api/files',
            fileById: (fileId) => `/api/files/${fileId}`,
            uploadFile: '/api/files/upload',
            downloadFile: (fileId) => `/api/files/${fileId}/download`,
            clients: '/api/clients',
            clientById: (clientId) => `/api/clients/${clientId}`,
            clientFolders: (clientId) => `/api/clients/${clientId}/folders`,
        };
    }

    /**
     * Add auth headers with access token and app key
     */
    async addAuthHeaders(headers) {
        headers = await super.addAuthHeaders(headers);
        if (this.appKey) {
            headers['X-App-Key'] = this.appKey;
        }
        return headers;
    }

    /**
     * Get current user details
     */
    async getUserDetails() {
        const options = {
            url: this.baseUrl + this.URLs.userDetails,
        };
        return this._get(options);
    }

    /**
     * List all folders
     * @param {Object} params - Query parameters
     */
    async listFolders(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.folders,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get folder by ID
     * @param {string} folderId - Folder ID
     */
    async getFolder(folderId) {
        const options = {
            url: this.baseUrl + this.URLs.folderById(folderId),
        };
        return this._get(options);
    }

    /**
     * Get folder contents (files and subfolders)
     * @param {string} folderId - Folder ID
     */
    async getFolderContents(folderId) {
        const options = {
            url: this.baseUrl + this.URLs.folderContents(folderId),
        };
        return this._get(options);
    }

    /**
     * Create a new folder
     * @param {Object} params
     * @param {string} params.name - Folder name
     * @param {string} params.parentId - Parent folder ID (optional)
     * @param {string} params.clientId - Client ID (optional)
     */
    async createFolder({ name, parentId, clientId }) {
        const options = {
            url: this.baseUrl + this.URLs.createFolder,
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                name,
                parentId,
                clientId,
            },
        };
        return this._post(options);
    }

    /**
     * Create client folder structure
     * Creates a standardized folder structure for a new client
     * @param {Object} params
     * @param {string} params.clientId - Client ID
     * @param {string} params.clientName - Client name
     * @param {Array<string>} params.folderStructure - Array of folder names to create
     */
    async createClientFolderStructure({ clientId, clientName, folderStructure }) {
        const defaultStructure = [
            'Tax Returns',
            'Financial Statements',
            'Invoices',
            'Receipts',
            'Correspondence',
            'Contracts',
            'Bank Statements',
            'Payroll',
        ];

        const folders = folderStructure || defaultStructure;
        const createdFolders = [];

        // Create root client folder
        const rootFolder = await this.createFolder({
            name: clientName,
            clientId,
        });

        // Create subfolders
        for (const folderName of folders) {
            try {
                const folder = await this.createFolder({
                    name: folderName,
                    parentId: rootFolder.id,
                    clientId,
                });
                createdFolders.push(folder);
            } catch (error) {
                console.error(`Failed to create folder ${folderName}:`, error);
            }
        }

        return {
            rootFolder,
            subfolders: createdFolders,
        };
    }

    /**
     * Delete a folder
     * @param {string} folderId - Folder ID
     */
    async deleteFolder(folderId) {
        const options = {
            url: this.baseUrl + this.URLs.folderById(folderId),
        };
        return this._delete(options);
    }

    /**
     * List files
     * @param {Object} params - Query parameters
     */
    async listFiles(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.files,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get file by ID
     * @param {string} fileId - File ID
     */
    async getFile(fileId) {
        const options = {
            url: this.baseUrl + this.URLs.fileById(fileId),
        };
        return this._get(options);
    }

    /**
     * Upload a file
     * @param {Object} params
     * @param {string} params.folderId - Folder ID to upload to
     * @param {Buffer|string} params.file - File content
     * @param {string} params.filename - File name
     */
    async uploadFile({ folderId, file, filename }) {
        const options = {
            url: this.baseUrl + this.URLs.uploadFile,
            headers: {
                'Content-Type': 'multipart/form-data',
            },
            body: {
                folderId,
                file,
                filename,
            },
        };
        return this._post(options);
    }

    /**
     * Download a file
     * @param {string} fileId - File ID
     */
    async downloadFile(fileId) {
        const options = {
            url: this.baseUrl + this.URLs.downloadFile(fileId),
            returnFullRes: true,
        };
        return this._get(options);
    }

    /**
     * Delete a file
     * @param {string} fileId - File ID
     */
    async deleteFile(fileId) {
        const options = {
            url: this.baseUrl + this.URLs.fileById(fileId),
        };
        return this._delete(options);
    }

    /**
     * List all clients
     */
    async listClients() {
        const options = {
            url: this.baseUrl + this.URLs.clients,
        };
        return this._get(options);
    }

    /**
     * Get client by ID
     * @param {string} clientId - Client ID
     */
    async getClient(clientId) {
        const options = {
            url: this.baseUrl + this.URLs.clientById(clientId),
        };
        return this._get(options);
    }

    /**
     * Get client folders
     * @param {string} clientId - Client ID
     */
    async getClientFolders(clientId) {
        const options = {
            url: this.baseUrl + this.URLs.clientFolders(clientId),
        };
        return this._get(options);
    }
}

module.exports = { Api };
