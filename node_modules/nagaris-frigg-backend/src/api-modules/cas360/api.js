const { OAuth2Requester } = require('@friggframework/core');

/**
 * BGL CAS360 API Client
 * For Company and Trust client types
 * Shares OAuth token with SimpleFund360
 */
class Api extends OAuth2Requester {
    constructor(params) {
        super(params);

        this.baseUrl = 'https://api.staging.bgl360.com.au';

        const clientId = process.env.BGL_CLIENT_ID || '***REMOVED***';
        const redirectUri = encodeURIComponent(`${process.env.REDIRECT_URI}/bgl/callback`);

        this.authorizationUri = `https://integrations.staging.bgl360.com.au/u/oauth/authorize?response_type=code&client_id=${clientId}&scope=developer&redirect_uri=${redirectUri}`;
        this.tokenUri = 'https://api.staging.bgl360.com.au/oauth/token';

        this.URLs = {
            // User/Account
            currentUser: '/user/me',

            // Companies
            companies: '/companies',
            companyById: (companyId) => `/companies/${companyId}`,

            // Trusts
            trusts: '/trusts',
            trustById: (trustId) => `/trusts/${trustId}`,

            // Contacts
            contacts: '/contacts',
            contactById: (contactId) => `/contacts/${contactId}`,

            // Directors/Officers
            directors: (companyId) => `/companies/${companyId}/directors`,

            // Addresses
            addresses: (companyId) => `/companies/${companyId}/addresses`,
        };
    }

    /**
     * Get current user details
     */
    async getCurrentUser() {
        const options = {
            url: this.baseUrl + this.URLs.currentUser,
        };
        return this._get(options);
    }

    // ==================== Companies ====================

    /**
     * List all companies
     * @param {Object} params - Query parameters
     */
    async listCompanies(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.companies,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get company by ID
     * @param {string} companyId - Company ID
     */
    async getCompany(companyId) {
        const options = {
            url: this.baseUrl + this.URLs.companyById(companyId),
        };
        return this._get(options);
    }

    /**
     * Create a new company
     * @param {Object} params
     * @param {string} params.name - Company name
     * @param {string} params.acn - Australian Company Number
     * @param {string} params.abn - Australian Business Number
     */
    async createCompany(params) {
        const options = {
            url: this.baseUrl + this.URLs.companies,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a company
     * @param {string} companyId - Company ID
     * @param {Object} params - Fields to update
     */
    async updateCompany(companyId, params) {
        const options = {
            url: this.baseUrl + this.URLs.companyById(companyId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    /**
     * Delete a company
     * @param {string} companyId - Company ID
     */
    async deleteCompany(companyId) {
        const options = {
            url: this.baseUrl + this.URLs.companyById(companyId),
        };
        return this._delete(options);
    }

    // ==================== Trusts ====================

    /**
     * List all trusts
     * @param {Object} params - Query parameters
     */
    async listTrusts(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.trusts,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get trust by ID
     * @param {string} trustId - Trust ID
     */
    async getTrust(trustId) {
        const options = {
            url: this.baseUrl + this.URLs.trustById(trustId),
        };
        return this._get(options);
    }

    /**
     * Create a new trust
     * @param {Object} params
     * @param {string} params.name - Trust name
     * @param {string} params.trustType - Trust type
     */
    async createTrust(params) {
        const options = {
            url: this.baseUrl + this.URLs.trusts,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a trust
     * @param {string} trustId - Trust ID
     * @param {Object} params - Fields to update
     */
    async updateTrust(trustId, params) {
        const options = {
            url: this.baseUrl + this.URLs.trustById(trustId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    /**
     * Delete a trust
     * @param {string} trustId - Trust ID
     */
    async deleteTrust(trustId) {
        const options = {
            url: this.baseUrl + this.URLs.trustById(trustId),
        };
        return this._delete(options);
    }

    // ==================== Contacts ====================

    /**
     * List all contacts
     * @param {Object} params - Query parameters
     */
    async listContacts(params = {}) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            query: params,
        };
        return this._get(options);
    }

    /**
     * Get contact by ID
     * @param {string} contactId - Contact ID
     */
    async getContact(contactId) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
        };
        return this._get(options);
    }

    /**
     * Create a new contact
     * @param {Object} params
     * @param {string} params.firstName - First name
     * @param {string} params.lastName - Last name
     * @param {string} params.email - Email address
     */
    async createContact(params) {
        const options = {
            url: this.baseUrl + this.URLs.contacts,
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    /**
     * Update a contact
     * @param {string} contactId - Contact ID
     * @param {Object} params - Fields to update
     */
    async updateContact(contactId, params) {
        const options = {
            url: this.baseUrl + this.URLs.contactById(contactId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._patch(options);
    }

    // ==================== Directors ====================

    /**
     * Get company directors
     * @param {string} companyId - Company ID
     */
    async getDirectors(companyId) {
        const options = {
            url: this.baseUrl + this.URLs.directors(companyId),
        };
        return this._get(options);
    }

    /**
     * Add director to company
     * @param {string} companyId - Company ID
     * @param {Object} params - Director details
     */
    async addDirector(companyId, params) {
        const options = {
            url: this.baseUrl + this.URLs.directors(companyId),
            headers: {
                'Content-Type': 'application/json',
            },
            body: params,
        };
        return this._post(options);
    }

    // ==================== Sync Operations ====================

    /**
     * Sync company from Nagaris to CAS360
     * @param {Object} companyData
     * @param {string} companyData.name - Company name
     * @param {string} companyData.acn - ACN
     * @param {string} companyData.abn - ABN
     * @param {Array} companyData.directors - Array of directors
     * @param {Object} companyData.address - Company address
     */
    async syncCompany(companyData) {
        const { name, acn, abn, directors, address, ...additionalData } = companyData;

        // Check if company exists by ACN
        let existingCompany = null;
        if (acn) {
            const companies = await this.listCompanies({ acn });
            if (companies && companies.length > 0) {
                existingCompany = companies[0];
            }
        }

        const companyParams = {
            name,
            acn,
            abn,
            ...additionalData,
        };

        let company;
        if (existingCompany) {
            // Update existing company
            company = await this.updateCompany(existingCompany.id, companyParams);
        } else {
            // Create new company
            company = await this.createCompany(companyParams);
        }

        // Sync directors if provided
        if (directors && directors.length > 0) {
            for (const director of directors) {
                try {
                    await this.addDirector(company.id, director);
                } catch (error) {
                    console.error('Error adding director:', error);
                }
            }
        }

        return company;
    }

    /**
     * Sync trust from Nagaris to CAS360
     * @param {Object} trustData
     * @param {string} trustData.name - Trust name
     * @param {string} trustData.trustType - Trust type
     */
    async syncTrust(trustData) {
        const { name, trustType, ...additionalData } = trustData;

        // Check if trust exists by name
        let existingTrust = null;
        const trusts = await this.listTrusts({ name });
        if (trusts && trusts.length > 0) {
            existingTrust = trusts[0];
        }

        const trustParams = {
            name,
            trustType,
            ...additionalData,
        };

        if (existingTrust) {
            return await this.updateTrust(existingTrust.id, trustParams);
        } else {
            return await this.createTrust(trustParams);
        }
    }
}

module.exports = { Api };
