const { BasicAuthRequester } = require('@friggframework/core');

class Api extends BasicAuthRequester {
    constructor(params) {
        super(params);
        this.baseUrl = 'https://api.twilio.com/2010-04-01';
        this.accountSid = null;

        this.URLs = {
            account: () => `/Accounts/${this.accountSid}.json`,
            messages: () => `/Accounts/${this.accountSid}/Messages.json`,
            messageById: (messageSid) => `/Accounts/${this.accountSid}/Messages/${messageSid}.json`,
            phoneNumbers: () => `/Accounts/${this.accountSid}/IncomingPhoneNumbers.json`,
        };
    }

    /**
     * Set credentials for HTTP Basic Authentication
     */
    async setCredential(credential) {
        this.credential = credential;

        if (credential.accountSid && credential.authToken) {
            this.accountSid = credential.accountSid;
            const auth = Buffer.from(`${credential.accountSid}:${credential.authToken}`).toString('base64');
            this.setHeader('Authorization', `Basic ${auth}`);
        }
    }

    /**
     * Get account details
     */
    async getAccountDetails() {
        if (!this.accountSid) {
            throw new Error('Account SID not set');
        }
        const options = {
            url: this.baseUrl + this.URLs.account(),
        };
        return this.get(options);
    }

    /**
     * Send an SMS message
     * @param {Object} params - Message parameters
     * @param {string} params.To - Recipient phone number (E.164 format recommended)
     * @param {string} params.From - Sender phone number (must be a Twilio number)
     * @param {string} params.Body - Message body text
     * @returns {Promise<Object>} Message resource object
     */
    async sendMessage({ To, From, Body }) {
        if (!this.accountSid) {
            throw new Error('Account SID not set. Call setCredential first.');
        }

        if (!To || !From || !Body) {
            throw new Error('To, From, and Body are required parameters');
        }

        // Twilio expects application/x-www-form-urlencoded
        const formData = new URLSearchParams({
            To,
            From,
            Body
        });

        const options = {
            url: this.baseUrl + this.URLs.messages(),
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData.toString()
        };

        return this.post(options);
    }

    /**
     * List phone numbers associated with the account
     * @returns {Promise<Object>} List of phone numbers
     */
    async listPhoneNumbers() {
        if (!this.accountSid) {
            throw new Error('Account SID not set');
        }
        const options = {
            url: this.baseUrl + this.URLs.phoneNumbers(),
        };
        return this.get(options);
    }

    /**
     * Get message details by SID
     * @param {string} messageSid - Message SID
     * @returns {Promise<Object>} Message resource object
     */
    async getMessage(messageSid) {
        if (!this.accountSid) {
            throw new Error('Account SID not set');
        }
        const options = {
            url: this.baseUrl + this.URLs.messageById(messageSid),
        };
        return this.get(options);
    }

    /**
     * List messages (with optional filtering)
     * @param {Object} params - Query parameters
     * @returns {Promise<Object>} List of message resources
     */
    async listMessages(params = {}) {
        if (!this.accountSid) {
            throw new Error('Account SID not set');
        }

        const options = {
            url: this.baseUrl + this.URLs.messages(),
            params,
        };

        return this.get(options);
    }
}

module.exports = { Api };
