/**
 * Unit tests for ProjectId Value Object
 * Domain Layer - Value Objects should be immutable and deterministic
 */

import { jest } from '@jest/globals'
import { ProjectId } from '../../../../src/domain/value-objects/ProjectId.js'
import crypto from 'crypto'

describe('ProjectId Value Object', () => {
  describe('generate', () => {
    it('should generate deterministic 8-character ID from absolute path', () => {
      const path = '/Users/sean/Documents/GitHub/frigg'
      const id1 = ProjectId.generate(path)
      const id2 = ProjectId.generate(path)

      expect(id1).toBe(id2)
      expect(id1).toHaveLength(8)
      expect(/^[a-f0-9]{8}$/.test(id1)).toBe(true)
    })

    it('should use first 8 chars of SHA-256 hash', () => {
      const path = '/test/project'
      const expectedHash = crypto.createHash('sha256')
        .update(path)
        .digest('hex')
        .substring(0, 8)

      const id = ProjectId.generate(path)

      expect(id).toBe(expectedHash)
    })

    it('should generate different IDs for different paths', () => {
      const path1 = '/Users/sean/project1'
      const path2 = '/Users/sean/project2'

      const id1 = ProjectId.generate(path1)
      const id2 = ProjectId.generate(path2)

      expect(id1).not.toBe(id2)
    })

    it('should be case-sensitive', () => {
      const path1 = '/Users/Sean/Project'
      const path2 = '/users/sean/project'

      const id1 = ProjectId.generate(path1)
      const id2 = ProjectId.generate(path2)

      expect(id1).not.toBe(id2)
    })

    it('should throw error for invalid input', () => {
      expect(() => ProjectId.generate(null)).toThrow('ProjectId.generate requires a valid absolute path string')
      expect(() => ProjectId.generate(undefined)).toThrow('ProjectId.generate requires a valid absolute path string')
      expect(() => ProjectId.generate('')).toThrow('ProjectId.generate requires a valid absolute path string')
      expect(() => ProjectId.generate(123)).toThrow('ProjectId.generate requires a valid absolute path string')
    })

    it('should handle paths with special characters', () => {
      const paths = [
        '/Users/test/My Project (2024)',
        '/Users/test/project-with-dashes',
        '/Users/test/project_with_underscores',
        '/Users/test/project.with.dots'
      ]

      paths.forEach(path => {
        const id = ProjectId.generate(path)
        expect(id).toHaveLength(8)
        expect(/^[a-f0-9]{8}$/.test(id)).toBe(true)
      })
    })
  })

  describe('isValid', () => {
    it('should validate correct 8-character hex ID', () => {
      expect(ProjectId.isValid('1a7501a0')).toBe(true)
      expect(ProjectId.isValid('abcdef12')).toBe(true)
      expect(ProjectId.isValid('00000000')).toBe(true)
      expect(ProjectId.isValid('ffffffff')).toBe(true)
    })

    it('should reject IDs with wrong length', () => {
      expect(ProjectId.isValid('1a750')).toBe(false)
      expect(ProjectId.isValid('1a7501a00')).toBe(false)
      expect(ProjectId.isValid('')).toBe(false)
    })

    it('should reject non-hex characters', () => {
      expect(ProjectId.isValid('1a7501g0')).toBe(false)
      expect(ProjectId.isValid('1A7501A0')).toBe(false) // uppercase not allowed
      expect(ProjectId.isValid('1a750!a0')).toBe(false)
      expect(ProjectId.isValid('1a750 a0')).toBe(false)
    })

    it('should reject non-string types', () => {
      expect(ProjectId.isValid(null)).toBe(false)
      expect(ProjectId.isValid(undefined)).toBe(false)
      expect(ProjectId.isValid(12345678)).toBe(false)
      expect(ProjectId.isValid(['1a7501a0'])).toBe(false)
      expect(ProjectId.isValid({ id: '1a7501a0' })).toBe(false)
    })
  })

  describe('integration - generate and validate', () => {
    it('should validate IDs generated by generate()', () => {
      const paths = [
        '/Users/test/project1',
        '/Users/test/project2',
        '/var/www/app',
        '/home/dev/workspace'
      ]

      paths.forEach(path => {
        const id = ProjectId.generate(path)
        expect(ProjectId.isValid(id)).toBe(true)
      })
    })
  })

  describe('edge cases', () => {
    it('should handle very long paths', () => {
      const longPath = '/Users/' + 'a'.repeat(1000) + '/project'
      const id = ProjectId.generate(longPath)

      expect(id).toHaveLength(8)
      expect(ProjectId.isValid(id)).toBe(true)
    })

    it('should handle root path', () => {
      const id = ProjectId.generate('/')

      expect(id).toHaveLength(8)
      expect(ProjectId.isValid(id)).toBe(true)
    })

    it('should handle paths with unicode characters', () => {
      const unicodePath = '/Users/test/проект'
      const id = ProjectId.generate(unicodePath)

      expect(id).toHaveLength(8)
      expect(ProjectId.isValid(id)).toBe(true)
    })
  })
})
