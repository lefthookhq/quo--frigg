const { createIntegrationRouter } = require('@friggframework/core');
const { createAppHandler } = require('./../app-handler-helpers');
const { requireLoggedInUser } = require('./middleware/requireLoggedInUser');
const { loadAppDefinition } = require('../app-definition-loader');
const { ProcessOAuth2CallbackUseCase } = require('../../modules/use-cases/process-oauth2-callback');
const { createAuthorizationSessionRepository } = require('../../modules/repositories/authorization-session-repository-factory');
const { ProcessAuthorizationCallback } = require('../../modules/use-cases/process-authorization-callback');
const { createModuleRepository } = require('../../modules/repositories/module-repository-factory');
const { createCredentialRepository } = require('../../credential/repositories/credential-repository-factory');
const { getModulesDefinitionFromIntegrationClasses } = require('../../integrations/utils/map-integration-dto');

const router = createIntegrationRouter();

// Initialize OAuth2 callback handler lazily
let processOAuth2Callback;

function initializeOAuth2Callback() {
    if (!processOAuth2Callback) {
        const { integrations } = loadAppDefinition();
        const moduleDefinitions = getModulesDefinitionFromIntegrationClasses(integrations);

        const authSessionRepository = createAuthorizationSessionRepository();
        const moduleRepository = createModuleRepository();
        const credentialRepository = createCredentialRepository();

        const processAuthorizationCallback = new ProcessAuthorizationCallback({
            moduleRepository,
            credentialRepository,
            moduleDefinitions
        });

        processOAuth2Callback = new ProcessOAuth2CallbackUseCase({
            authSessionRepository,
            processAuthorizationCallback
        });
    }
}

// OAuth2 callback handler - thin adapter that delegates to use case
// Note: No authentication required here since user is coming back from OAuth provider
router.route('/api/oauth/callback').get(
    async (req, res) => {
        console.log('ðŸ”¥ðŸ”¥ðŸ”¥ [OAuth Callback] ENDPOINT HIT! ðŸ”¥ðŸ”¥ðŸ”¥');
        console.log('[OAuth Callback] Full request details:', {
            method: req.method,
            url: req.url,
            query: req.query,
            headers: req.headers
        });

        const defaultFrontend = process.env.FRONTEND_URL || 'http://localhost:5173';
        const defaultPath = '/test-area';

        try {
            const { code, state, error } = req.query;

            console.log('[OAuth Callback] Extracted parameters:', {
                code: code ? `${code.substring(0, 20)}...` : 'MISSING!!!',
                state: state || 'MISSING!!!',
                error: error || 'none'
            });

            // Handle OAuth provider errors (user denied, etc.)
            if (error) {
                return res.redirect(`${defaultFrontend}${defaultPath}?error=${encodeURIComponent(error)}`);
            }

            // Validate required parameters
            if (!code || !state) {
                return res.redirect(`${defaultFrontend}${defaultPath}?error=missing_parameters`);
            }

            // Delegate to use case - it handles all business logic
            initializeOAuth2Callback();
            const result = await processOAuth2Callback.execute(code, state);

            // Map domain result to HTTP response
            // Use frontendBaseUrl from session if available, otherwise fall back to env var
            const frontendBase = result.frontendBaseUrl || defaultFrontend;
            const redirectUrl = new URL(result.redirectUrl, frontendBase);
            redirectUrl.searchParams.set('success', 'true');

            res.redirect(redirectUrl.toString());

        } catch (error) {
            console.error('OAuth2 callback error:', error);

            // Map error to HTTP response
            res.redirect(`${defaultFrontend}${defaultPath}?error=${encodeURIComponent(error.message)}`);
        }
    }
);

router.route('/redirect/:appId').get((req, res) => {
    res.redirect(
        `${process.env.FRONTEND_URI}/redirect/${req.params.appId
        }?${new URLSearchParams(req.query)}`
    );
});

// Integration settings endpoint
router.route('/config/integration-settings').get(requireLoggedInUser, (req, res) => {
    const appDefinition = loadAppDefinition();

    const settings = {
        autoProvisioningEnabled: appDefinition.integration?.autoProvisioningEnabled ?? true,
        credentialReuseStrategy: appDefinition.integration?.credentialReuseStrategy ?? 'shared',
        allowUserManagedEntities: appDefinition.integration?.allowUserManagedEntities ?? true
    };

    res.json(settings);
});

const handler = createAppHandler('HTTP Event: Auth', router);

module.exports = { handler, router };
