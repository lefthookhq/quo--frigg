"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configs = exports.processors = void 0;
const js_yaml_1 = require("js-yaml");
const jshint_1 = require("jshint");
const fileContents = new Map();
function cacheYaml(fileName, text) {
    fileContents.set(fileName, text);
}
function loadYaml(fileContent, fileName) {
    return js_yaml_1.loadAll(fileContent, undefined, {
        filename: fileName,
        json: false,
    });
}
function lintJSON(yamlDoc) {
    var _a;
    const yaml_json = JSON.stringify(yamlDoc, null, 2);
    jshint_1.JSHINT(yaml_json);
    const data = jshint_1.JSHINT.data();
    const errors = (_a = data === null || data === void 0 ? void 0 : data.errors) !== null && _a !== void 0 ? _a : [];
    return errors;
}
function preprocess(text, fileName) {
    cacheYaml(fileName, text);
    return [{ text, filename: fileName }];
}
function postprocess(messages, fileName) {
    var _a, _b;
    let linter_messages = [];
    const fileContent = fileContents.get(fileName);
    if (fileContent !== undefined) {
        let yamlDocs;
        try {
            yamlDocs = loadYaml(fileContent, fileName);
        }
        catch (e) {
            const { message, mark } = e;
            return [
                {
                    ruleId: "invalid-yaml",
                    severity: 2,
                    message,
                    source: mark === null || mark === void 0 ? void 0 : mark.buffer,
                    line: (_a = mark === null || mark === void 0 ? void 0 : mark.line) !== null && _a !== void 0 ? _a : 0,
                    column: (_b = mark === null || mark === void 0 ? void 0 : mark.column) !== null && _b !== void 0 ? _b : 0,
                },
            ];
        }
        const errors = yamlDocs.map((yamlDoc) => lintJSON(yamlDoc)).flat();
        linter_messages = errors.map((error) => {
            const { reason, evidence, line, character } = error;
            return {
                ruleId: "bad-yaml",
                severity: 2,
                message: reason,
                source: evidence,
                line,
                column: character,
            };
        });
        fileContents.delete(fileName);
    }
    return linter_messages;
}
exports.processors = {
    ".yml": {
        preprocess,
        postprocess,
    },
    ".yaml": {
        preprocess,
        postprocess,
    },
};
exports.configs = {
    recommended: {
        ignorePatterns: ["!.github"],
        overrides: [
            {
                plugins: ["yaml"],
                files: ["*.yaml", "*.yml"],
            },
        ],
    },
};
//# sourceMappingURL=data:application/json;base64,